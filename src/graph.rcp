graph

#import renderer as r
#import array as arr
#import mem
#import math as m
#import io

map_point :: fn(p: m.v2, x_end: f32, y_end: f32) -> m.v2 {
    X :: @f32 0.75;
	Y :: @f32 0.75;
	return m.v2 {
		m.map(p.x, 0, x_end, -X, X),
		m.map(p.y, 0, y_end, -Y, Y),
	};
}

calculate_spline :: fn(p0: m.v2, p1: m.v2, p2: m.v2, p3: m.v2, t: f32) -> m.v2 {

	tt := t * t;
	ttt := tt * t;
	q0 := -ttt + 2.0*tt - t;
	q1 := 3 * ttt - 5 * tt + 2;
	q2 := -3 * ttt + 4 * tt + t;
	q3 := ttt - tt;

	// @TODO: compiler bug, investigate
	// return m.v2_add(m.v2_add(m.v2_scale(p0, q0), m.v2_scale(p1, q1)), m.v2_add(m.v2_scale(p2, q2), m.v2_scale(p3, q3)));

	x := 0.5 * (p0.x * q0 + p1.x * q1 + p2.x * q2 + p3.x * q3);
	y := 0.5 * (p0.y * q0 + p1.y * q1 + p2.y * q2 + p3.y * q3);
	return m.v2 { x, y };
}

draw :: fn(renderer: *r.ctx, points: []m.v2, x_end: f32, y_end: f32) {
    if points.count < 4
        return;

    scratch := mem.create_scratch(1024 * 1024 * 1024);
    defer mem.destroy_scratch(&scratch);

    verts := arr.create(m.v3, &scratch);

    for i := 1; i < points.count-2; i += 1 {
		p0 := map_point(points[i-1], x_end, y_end);
		p1 := map_point(points[i], x_end, y_end);
		p2 := map_point(points[i+1], x_end, y_end);
		p3 := map_point(points[i+2], x_end, y_end);

		for t := @f32 0.0; t < 1.0; t += 0.1 {
			point := calculate_spline(p0, p1, p2, p3, t);
			arr.add(&verts, m.v3{ point.x, point.y, 0 });
		}

    }


    r.draw_lines(renderer, verts, 5);
}


