renderer
#import gl
#import math as m
#import mem
#import io
#import os

struct ctx {
    vao: u32,
    vbo: u32,
}

struct Framebuffer {
    buf: u32,
    texture: u32,
    rbo: u32,
}


compile_shaders :: fn(vert: **u8, frag: **u8) -> u32 {
    vert_shader_gl := gl.CreateShader(gl.VERTEX_SHADER);
    frag_shader_gl := gl.CreateShader(gl.FRAGMENT_SHADER);
    compile_shader(vert_shader_gl, vert, "vertex");
    compile_shader(frag_shader_gl, frag, "fragment");

    program := gl.CreateProgram();
    gl.AttachShader(program, vert_shader_gl);
    gl.AttachShader(program, frag_shader_gl);
    gl.LinkProgram(program);
    success := @i32 0;
    gl.GetProgramiv(program, gl.LINK_STATUS, &success);
    if success == 0 {
        info_log := [512]u8 {};
        gl.GetProgramInfoLog(program, 512, null, &info_log[0]);
        io.println("Error linking shader\n%s", &info_log[0]);
        os.abort();
    }
    gl.DeleteShader(vert_shader_gl);
    gl.DeleteShader(frag_shader_gl);

    return program;
}

use_shader :: fn(program: u32) {
    gl.UseProgram(program);
}

create_ctx :: fn() -> ctx {
    result := ctx {};
    gl.GenVertexArrays(1, &result.vao);
    gl.GenBuffers(1, &result.vbo);

    gl.Enable(gl.DEBUG_OUTPUT);
    gl.Enable(gl.DEBUG_OUTPUT_SYNCHRONOUS);
    gl.Enable(gl.MULTISAMPLE);
    gl.Enable(gl.LINE_SMOOTH);
    gl.Enable(gl.BLEND);
    gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    gl.DebugMessageCallback(gl_callback, null);
    gl.DebugMessageControl(gl.DONT_CARE, gl.DONT_CARE, gl.DEBUG_SEVERITY_MEDIUM, 0, null, true);

    return result;
}

set_uniform :: fn(program: u32, name: string, passed: $T) {
    passed := passed;
    t := type_of passed;
    loc := gl.GetUniformLocation(program, name.data);
    if loc == -1 {
        io.println("Failed to find uniform % in shader", name);
        return;
    }

    if t == f32 {
        v := *@*f32 &passed;
        gl.Uniform1f(loc, v);
    } else if t == f64 {
        v := *@*f64 &passed;
        gl.Uniform1f(loc, @f32 v);
    } else if t == int {
        v := *@*int &passed;
        gl.Uniform1i(loc, @i32 v);
    } else if t == m.v2 {
        v := @*m.v2 &passed;
        gl.Uniform2f(loc, v.x, v.y);
    } else if t == m.v3 {
        v := @*m.v3 &passed;
        gl.Uniform3f(loc, v.x, v.y, v.z);
    } else {
        io.println("set_uniform(), unsupported type: %", t);
    }
}

create_framebuffer :: fn(w: u32, h: u32, alloc: *mem.Allocator) -> ?*Framebuffer {
    buf: u32;
    tex: u32;
    rbo: u32;

    mem := alloc.alloc(size_of Framebuffer, alloc);
    if mem == null return null;

    res := @*Framebuffer ?mem;

    gl.GenFramebuffers(1, &buf);
    gl.GenTextures(1, &tex);

    gl.BindFramebuffer(gl.FRAMEBUFFER, buf);
    defer gl.BindFramebuffer(gl.FRAMEBUFFER, 0);

    gl.BindTexture(gl.TEXTURE_2D, tex);
    defer gl.BindTexture(gl.TEXTURE_2D, 0);

    gl.TexImage2D(gl.TEXTURE_2D, 0, @i32 gl.RGB, w, h, 0, gl.RGB, gl.UNSIGNED_BYTE, null);

    gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

    gl.FramebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);


    gl.GenRenderbuffers(1, &rbo);

    gl.BindRenderbuffer(gl.RENDERBUFFER, rbo);
    defer gl.BindRenderbuffer(gl.RENDERBUFFER, 0);

    gl.RenderbufferStorage(gl.RENDERBUFFER, gl.DEPTH24_STENCIL8, w, h);

    if gl.CheckFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE {
        io.println("Framebuffer is not complete!");
    }

    res.buf = buf;
    res.texture = tex;
    res.rbo = rbo;

    return res;
}

delete_framebuffer :: fn(buf: *Framebuffer) {
    buf := buf;
    gl.DeleteFramebuffers(1, &buf.buf);
}

bind_framebuffer :: fn(buffer: ?*Framebuffer) {
    if buffer == null {
        gl.BindFramebuffer(gl.FRAMEBUFFER, 0);
    } else {
        gl.BindFramebuffer(gl.FRAMEBUFFER, (?buffer).buf);
    }
}

draw_verts :: fn(c: *ctx, verts: []m.v3) {
    offset := 0;
    gl.BindVertexArray(c.vao);
    gl.VertexAttribPointer(0, 3, gl.FLOAT, false, @i32 size_of m.v3, @*u8 offset);
    gl.EnableVertexAttribArray(0);
    gl.BindBuffer(gl.ARRAY_BUFFER, c.vbo);
    gl.BufferData(gl.ARRAY_BUFFER, @uint verts.count * @uint size_of m.v3, verts.data, gl.STATIC_DRAW);
    gl.DrawArrays(gl.TRIANGLES, 0, @i32 verts.count);
}

draw_lines :: fn(c: *ctx, verts: []m.v3, width: f32) {
    offset := 0;
    gl.LineWidth(width);
    gl.BindVertexArray(c.vao);
    gl.VertexAttribPointer(0, 3, gl.FLOAT, false, @i32 size_of m.v3, @*u8 offset);
    gl.EnableVertexAttribArray(0);
    gl.BindBuffer(gl.ARRAY_BUFFER, c.vbo);
    gl.BufferData(gl.ARRAY_BUFFER, @uint verts.count * @uint size_of m.v3, verts.data, gl.STATIC_DRAW);

    gl.DrawArrays(gl.LINE_STRIP, 0, @i32 verts.count);
}

#private

compile_shader :: fn (shader: u32, src: **u8, name: string) {
    gl.ShaderSource(shader, 1, src, null);
    gl.CompileShader(shader);

    success := @i32 0;
    gl.GetShaderiv(shader, gl.COMPILE_STATUS, &success);
    if success == 0 {
        info_log := [512]u8 {};
        gl.GetShaderInfoLog(shader, 512, null, &info_log[0]);
        io.println("Error compiling % shader\n%s", name, &info_log[0]);
        os.abort();
    }
}

gl_callback :: fn(src: u32, t: u32, id: u32, severity: u32, len: u32, msg: *u8, user: ?*) {
    io.println("GL Message: %s", msg);
}

