main

#import sdl
#import gl
#import io
#import os
#import mem
#import renderer as r
#import graph as gr
#import math as m

WIDTH   :: @i32 1280;
HEIGHT  :: @i32 720;

vert_shader := #embed_bin "../src/shaders/main.vert";
frag_shader := #embed_bin "../src/shaders/main.frag";

main :: fn() -> i32 {

    alloc := mem.create_scratch(1024 * 1024 * 1024);
    defer mem.destroy_scratch(&alloc);

    if !sdl.Init(sdl.INIT_VIDEO) {
        io.println("sdl.Init() failed: %s", sdl.GetError());
        return 1;
    }

    sdl.GL_SetAttribute(sdl.GLattr.CONTEXT_MAJOR_VERSION, 4);
    sdl.GL_SetAttribute(sdl.GLattr.CONTEXT_MINOR_VERSION, 3);
    sdl.GL_SetAttribute(sdl.GLattr.CONTEXT_PROFILE_MASK, sdl.GL_CONTEXT_PROFILE_CORE);
    sdl.GL_SetAttribute(sdl.GLattr.CONTEXT_FLAGS, sdl.GL_CONTEXT_DEBUG_FLAG);

    maybe_window := sdl.CreateWindow(c"My Window", WIDTH, HEIGHT, sdl.WINDOW_OPENGL | sdl.WINDOW_RESIZABLE);
    if maybe_window == null {
        io.println("sdl.CreateWindow() failed: %s", sdl.GetError());
        return 1;
    }

    window := ?maybe_window;

    maybe_ctx := sdl.GL_CreateContext(window);
    if maybe_ctx == null {
        io.println("sdl.GL_CreateContext() failed: %s", sdl.GetError());
        return 1;
    }

    gl_ctx := ?maybe_ctx;

    if gl.load() == false {
        io.println("gl.load() failed");
        return 1;
    }

    renderer := r.create_ctx();
    running := true;

    graph := []m.v2 {
        m.v2 {0,      1},
        m.v2 {0.5,    1.23},
        m.v2 {1,      1.12},
        m.v2 {1.5,    1.10},
        m.v2 {2,      1.05},
        m.v2 {2.5,    1.6},
        m.v2 {3,      2.3},
        m.v2 {3.5,    4.1},
        m.v2 {4,      5.3},
        m.v2 {4.5,    4.4},
        m.v2 {5,      2.1},
        m.v2 {5.5,    1.5},
        m.v2 {6,      1},
        m.v2 {6.5,    1},
        m.v2 {7,      0.5},
        m.v2 {7.5,    1.54},
        m.v2 {8,      2.1},
        m.v2 {8.5,    3.43},
        m.v2 {9,      4.54},
        m.v2 {9.5,    5.15},
        m.v2 {10,     5.4},
    };

    sdl.GL_SetSwapInterval(1);

    mouse := m.v2 { 0, 0 };

    program := r.compile_shaders(&vert_shader, &frag_shader);
    r.use_shader(program);

    maybe_fb := r.create_framebuffer(@u32 WIDTH, @u32 HEIGHT, &alloc);
    os.assert(maybe_fb != null, "Failed to create main framebuffer");
    framebuffer := ?maybe_fb;
    r.bind_framebuffer(framebuffer);


    gl.Viewport(0, 0, WIDTH, HEIGHT);
    t := @f32 0.0;
    lb_down := false;
    for running {
        gl.Clear(gl.COLOR_BUFFER_BIT);
        gl.ClearColor(0.051,0.145,0.227,1.0);
        event: sdl.Event;
        for sdl.PollEvent(&event) {
            match event.type {
                sdl.EventType.QUIT: {
                    running = false;
                },
                sdl.EventType.MOUSE_MOTION: {
                    mouse.x = event.motion.x;
                    mouse.y = event.motion.y;
                },
                sdl.EventType.MOUSE_BUTTON_DOWN: {
                    if event.button.button == sdl.BUTTON_MASK(sdl.BUTTON_LEFT) {
                        lb_down = true;
                    }
                },
                sdl.EventType.MOUSE_BUTTON_UP: {
                    if event.button.button == sdl.BUTTON_MASK(sdl.BUTTON_LEFT) {
                        lb_down = false;
                    }
                },
            };
        }

        
        t += 0.05;
        r.set_uniform(program, "t", t);
        r.set_uniform(program, "u_resolution", m.v2 { WIDTH, HEIGHT });
        r.set_uniform(program, "u_mouse", mouse);
        r.set_uniform(program, "u_color", m.v3 { 0.2, 0.5, 1.0 });

        DARK_F := @f32 0.5;

        if lb_down
            r.set_uniform(program, "u_darken", 1);
        else
            r.set_uniform(program, "u_darken", 0);
        
        gr.draw(&renderer, graph, 10, 6);

        sdl.GL_SwapWindow(window);
    }


    return 0;
}




