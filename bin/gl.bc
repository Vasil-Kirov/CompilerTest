; ModuleID = 'gl'
source_filename = "load_gl.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%slice.112 = type { i64, ptr }
%string.69 = type { ptr, i64 }

$__gl_dll_module = comdat nodeduplicate

$___asan_gen__anon_global = comdat nodeduplicate

$___asan_gen__anon_global.6 = comdat nodeduplicate

@__sdl_INIT_AUDIO = external global i64
@__sdl_INIT_VIDEO = external global i64
@__sdl_INIT_JOYSTICK = external global i64
@__sdl_INIT_HAPTIC = external global i64
@__sdl_INIT_GAMEPAD = external global i64
@__sdl_INIT_EVENTS = external global i64
@__sdl_INIT_SENSOR = external global i64
@__sdl_INIT_CAMERA = external global i64
@__sdl_WINDOW_FULLSCREEN = external global i64
@__sdl_WINDOW_OPENGL = external global i64
@__sdl_WINDOW_OCCLUDED = external global i64
@__sdl_WINDOW_HIDDEN = external global i64
@__sdl_WINDOW_BORDERLESS = external global i64
@__sdl_WINDOW_RESIZABLE = external global i64
@__sdl_WINDOW_MINIMIZED = external global i64
@__sdl_WINDOW_MAXIMIZED = external global i64
@__sdl_WINDOW_MOUSE_GRABBED = external global i64
@__sdl_WINDOW_INPUT_FOCUS = external global i64
@__sdl_WINDOW_MOUSE_FOCUS = external global i64
@__sdl_WINDOW_EXTERNAL = external global i64
@__sdl_WINDOW_MODAL = external global i64
@__sdl_WINDOW_HIGH_PIXEL_DENSITY = external global i64
@__sdl_WINDOW_MOUSE_CAPTURE = external global i64
@__sdl_WINDOW_MOUSE_RELATIVE_MODE = external global i64
@__sdl_WINDOW_ALWAYS_ON_TOP = external global i64
@__sdl_WINDOW_UTILITY = external global i64
@__sdl_WINDOW_TOOLTIP = external global i64
@__sdl_WINDOW_POPUP_MENU = external global i64
@__sdl_WINDOW_KEYBOARD_GRABBED = external global i64
@__sdl_WINDOW_VULKAN = external global i64
@__sdl_WINDOW_METAL = external global i64
@__sdl_WINDOW_TRANSPARENT = external global i64
@__sdl_WINDOW_NOT_FOCUSABLE = external global i64
@__gl_dll_module = global { ptr, [24 x i8] } zeroinitializer, comdat, align 32
@__init_INVALID_TYPE = external global i64
@__init_type_table = external global %slice.112
@__os_STD_INPUT_HANDLE = external global i32
@__os_STD_OUTPUT_HANDLE = external global i32
@__os_STD_ERROR_HANDLE = external global i32
@__os_INVALID_HANDLE_VALUE = external global ptr
@__os_CP_UTF7 = external global i32
@__os_CP_UTF8 = external global i32
@__os_MEM_COMMIT = external global i32
@__os_MEM_RESERVE = external global i32
@__os_MEM_RELEASE = external global i32
@__os_PAGE_NOACCESS = external global i32
@__os_PAGE_READONLY = external global i32
@__os_PAGE_READWRITE = external global i32
@__os_PAGE_WRITECOPY = external global i32
@__os_PAGE_EXECUTE = external global i32
@__os_PAGE_EXECUTE_READ = external global i32
@__os_PAGE_EXECUTE_READWRITE = external global i32
@__os_PAGE_EXECUTE_WRITECOPY = external global i32
@__os_PAGE_GUARD = external global i32
@__os_PAGE_NOCACHE = external global i32
@__os_PAGE_WRITECOMBINE = external global i32
@__str_CONTINUE_BIT = external global i8
@___asan_gen__anon_global = internal constant { [26 x i8], [38 x i8] } { [26 x i8] c"Failed to get gl function\00", [38 x i8] zeroinitializer }, comdat, align 32
@___asan_gen__anon_global.6 = internal constant { [13 x i8], [19 x i8] } { [13 x i8] c"opengl32.dll\00", [19 x i8] zeroinitializer }, comdat, align 32
@llvm.used = appending global [1 x ptr] [ptr @asan.module_ctor], section "llvm.metadata"
@___asan_gen_ = private constant [3 x i8] c"gl\00", align 1
@___asan_gen_.2 = private unnamed_addr constant [16 x i8] c"__gl_dll_module\00", align 1
@__odr_asan_gen___gl_dll_module = global i8 0, align 1
@___asan_gen_.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@___asan_gen_.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@__asan_global___gl_dll_module = private global { i64, i64, i64, i64, i64, i64, i64, i64 } { i64 ptrtoint (ptr @__gl_dll_module to i64), i64 8, i64 32, i64 ptrtoint (ptr @___asan_gen_.2 to i64), i64 ptrtoint (ptr @___asan_gen_ to i64), i64 0, i64 0, i64 ptrtoint (ptr @__odr_asan_gen___gl_dll_module to i64) }, section ".ASAN$GL", comdat($__gl_dll_module), align 64, !associated !0
@__asan_global_ = private global { i64, i64, i64, i64, i64, i64, i64, i64 } { i64 ptrtoint (ptr @___asan_gen__anon_global to i64), i64 26, i64 64, i64 ptrtoint (ptr @___asan_gen_.3 to i64), i64 ptrtoint (ptr @___asan_gen_ to i64), i64 0, i64 0, i64 -1 }, section ".ASAN$GL", comdat($___asan_gen__anon_global), align 64, !associated !1
@__asan_global_.5 = private global { i64, i64, i64, i64, i64, i64, i64, i64 } { i64 ptrtoint (ptr @___asan_gen__anon_global.6 to i64), i64 13, i64 32, i64 ptrtoint (ptr @___asan_gen_.4 to i64), i64 ptrtoint (ptr @___asan_gen_ to i64), i64 0, i64 0, i64 -1 }, section ".ASAN$GL", comdat($___asan_gen__anon_global.6), align 64, !associated !2
@llvm.compiler.used = appending global [4 x ptr] [ptr @__gl_dll_module, ptr @__asan_global___gl_dll_module, ptr @__asan_global_, ptr @__asan_global_.5], section "llvm.metadata"
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_ctor, ptr null }]

define void @__gl___GlobalInitializerFunction.0() {
block_0:
  ret void
}

declare i32 @__main_main()

declare i1 @SDL_Init(i32)

declare ptr @SDL_CreateWindow(ptr, i32, i32, i64)

declare void @SDL_GL_CreateContext(ptr, ptr)

declare i1 @SDL_GL_SwapWindow(ptr)

declare i1 @SDL_PollEvent(ptr)

declare ptr @SDL_GetError()

declare ptr @wglGetProcAddress(ptr)

declare ptr @GetProcAddress(ptr, ptr)

declare ptr @LoadLibraryA(ptr)

define ptr @__gl_load_gl_fn(ptr %0) !dbg !71 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  %3 = alloca %string.69, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 16, i1 false)
  store ptr %0, ptr %1, align 8, !dbg !78
  call void @llvm.dbg.value(metadata ptr %1, metadata !79, metadata !DIExpression()), !dbg !78
  %4 = load ptr, ptr %1, align 8, !dbg !80
  %5 = call ptr @wglGetProcAddress(ptr %4), !dbg !80
  store ptr %5, ptr %2, align 8, !dbg !80
  call void @llvm.dbg.declare(metadata ptr %2, metadata !81, metadata !DIExpression()), !dbg !80
  %6 = load ptr, ptr %2, align 8, !dbg !82
  %7 = icmp eq ptr %6, null, !dbg !82
  %8 = load ptr, ptr %2, align 8, !dbg !82
  %9 = ptrtoint ptr %8 to i64, !dbg !82
  %10 = icmp eq i64 %9, 1, !dbg !82
  %11 = icmp ne i1 %7, false, !dbg !82
  %12 = icmp ne i1 %10, false, !dbg !82
  %13 = or i1 %11, %12, !dbg !82
  %14 = load ptr, ptr %2, align 8, !dbg !82
  %15 = ptrtoint ptr %14 to i64, !dbg !82
  %16 = icmp eq i64 %15, 2, !dbg !82
  %17 = icmp ne i1 %13, false, !dbg !82
  %18 = icmp ne i1 %16, false, !dbg !82
  %19 = or i1 %17, %18, !dbg !82
  %20 = load ptr, ptr %2, align 8, !dbg !82
  %21 = ptrtoint ptr %20 to i64, !dbg !82
  %22 = icmp eq i64 %21, 3, !dbg !82
  %23 = icmp ne i1 %19, false, !dbg !82
  %24 = icmp ne i1 %22, false, !dbg !82
  %25 = or i1 %23, %24, !dbg !82
  %26 = load ptr, ptr %2, align 8, !dbg !82
  %27 = ptrtoint ptr %26 to i64, !dbg !82
  %28 = icmp eq i64 %27, -1, !dbg !82
  %29 = icmp ne i1 %25, false, !dbg !82
  %30 = icmp ne i1 %28, false, !dbg !82
  %31 = or i1 %29, %30, !dbg !82
  br i1 %31, label %block_1, label %block_2, !dbg !82

block_1:                                          ; preds = %block_0
  %32 = load ptr, ptr @__gl_dll_module, align 8, !dbg !83
  %33 = load ptr, ptr %1, align 8, !dbg !83
  %34 = call ptr @GetProcAddress(ptr %32, ptr %33), !dbg !83
  store ptr %34, ptr %2, align 8, !dbg !83
  %35 = load ptr, ptr %2, align 8, !dbg !84
  %36 = icmp eq ptr %35, null, !dbg !84
  %37 = alloca %string.69, align 8, !dbg !84
  %String = getelementptr inbounds %string.69, ptr %37, i32 0, i32 0, !dbg !84
  %Size = getelementptr inbounds %string.69, ptr %37, i32 0, i32 1, !dbg !84
  store ptr @___asan_gen__anon_global, ptr %String, align 8, !dbg !84
  store i64 25, ptr %Size, align 8, !dbg !84
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %37, i64 16, i1 false), !dbg !84
  call void @__os_assert(i1 %36, ptr %3), !dbg !84
  br label %block_3, !dbg !84

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !84

block_3:                                          ; preds = %block_2, %block_1
  %38 = load ptr, ptr %2, align 8, !dbg !85
  ret ptr %38, !dbg !85
}

define i1 @__gl_load() !dbg !86 {
block_0:
  %0 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 8, i1 false)
  %1 = call ptr @LoadLibraryA(ptr @___asan_gen__anon_global.6), !dbg !90
  store ptr %1, ptr %0, align 8, !dbg !90
  call void @llvm.dbg.declare(metadata ptr %0, metadata !91, metadata !DIExpression()), !dbg !90
  %2 = load ptr, ptr %0, align 8, !dbg !92
  %3 = icmp eq ptr %2, null, !dbg !92
  br i1 %3, label %block_1, label %block_2, !dbg !92

block_1:                                          ; preds = %block_0
  ret i1 false, !dbg !92

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !92

block_3:                                          ; preds = %block_2
  %4 = load ptr, ptr %0, align 8, !dbg !93
  store ptr %4, ptr @__gl_dll_module, align 8, !dbg !93
  ret i1 true, !dbg !94
}

declare void @__init_global_initializers()

declare i64 @__init_get_struct_alignment(i64)

declare i64 @__init_get_type_alignment(i64)

declare i64 @__init_get_basic_type_size(ptr)

declare i64 @__init_get_struct_size(i64)

declare i64 @__init_get_type_size(i64)

declare i64 @__init_get_struct_member_offset(ptr, i64)

declare i32 @__main_main.1()

declare i32 @main()

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare void @__os_abort()

declare void @__os_assert(i1, ptr)

declare void @__os_print(ptr, i32)

declare ptr @__os_alloc(i64)

declare void @__os_free(ptr)

declare void @__io_push_string(ptr, ptr)

declare void @__io_format_uint(ptr, i64)

declare void @__io_format_int(ptr, i64)

declare void @__io_print_typetype(ptr, ptr)

declare void @__io_print_type(ptr, ptr)

declare void @__io_builder_to_string(ptr, ptr)

declare void @__io___internal_print(ptr, ptr, ptr)

declare void @__io_print(ptr, ptr)

declare void @__io_println(ptr, ptr)

declare i32 @__io_get_next(ptr)

declare void @"__io_format_float@type_*[]u32_f32_i32_@void"(i64, ptr, float, i32)

declare void @"__io_format_float@type_*[]u32_f64_i32_@void"(i64, ptr, double, i32)

declare ptr @__mem_generic_alloc(i64, ptr)

declare void @__mem_generic_free(ptr, ptr)

declare void @__mem_create_generic_allocator(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare i64 @__str_get_codepoint_size(ptr)

declare ptr @__str_advance(ptr)

declare ptr @__str__it_advance(ptr, i64, i64)

declare i32 @__str_deref(ptr)

declare i32 @__str_index(ptr, i64)

declare void @"__array_add@*[]u32_u32_@void"(ptr, i32)

declare void @"__array_create@type_*__mem_Allocator_@[]u8"(ptr, i64, ptr)

declare void @"__array_add@*[]u8_u8_@void"(ptr, i8)

declare void @"__array_create@type_*__mem_Allocator_@[]u32"(ptr, i64, ptr)

declare void @"__array_free@*[]u32_@void"(ptr)

declare void @"__array_free@*[]u8_@void"(ptr)

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

declare void @__asan_before_dynamic_init(i64)

declare void @__asan_after_dynamic_init()

declare void @__asan_register_globals(i64, i64)

declare void @__asan_unregister_globals(i64, i64)

declare void @__asan_register_image_globals(i64)

declare void @__asan_unregister_image_globals(i64)

declare void @__asan_register_elf_globals(i64, i64, i64)

declare void @__asan_unregister_elf_globals(i64, i64, i64)

declare void @__asan_init()

; Function Attrs: nounwind
define internal void @asan.module_ctor() #3 {
  call void @__asan_init()
  call void @__asan_version_mismatch_check_v8()
  ret void
}

declare void @__asan_version_mismatch_check_v8()

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!3}
!llvm.module.flags = !{!69, !70}

!0 = !{ptr @__gl_dll_module}
!1 = !{ptr @___asan_gen__anon_global}
!2 = !{ptr @___asan_gen__anon_global.6}
!3 = distinct !DICompileUnit(language: DW_LANG_C99, file: !4, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !5, splitDebugInlining: false)
!4 = !DIFile(filename: "load_gl.rcp", directory: "E:\\Non_C_Projects\\RCPProjects\\graph\\src")
!5 = !{!6, !18, !39, !48, !53, !57, !65, !6, !18, !39, !48, !53, !57}
!6 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_TypeKind", scope: !4, file: !4, size: 64, align: 64, elements: !7)
!7 = !{!8, !9, !10, !11, !12, !13, !14, !15, !16, !17}
!8 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!9 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!10 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!11 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!12 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!13 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!14 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!15 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!16 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!17 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!18 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_BasicKind", scope: !4, file: !4, size: 64, align: 64, elements: !19)
!19 = !{!20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38}
!20 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!21 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!22 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!23 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!24 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!25 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!26 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!27 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!28 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!29 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!30 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!31 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!32 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!33 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!34 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!35 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!36 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!37 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!38 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!39 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_BasicFlag", scope: !4, file: !4, size: 32, align: 32, elements: !40)
!40 = !{!41, !42, !43, !44, !45, !46, !47}
!41 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!42 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!43 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!44 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!45 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!46 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!47 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!48 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_StructFlag", scope: !4, file: !4, size: 32, align: 32, elements: !49)
!49 = !{!50, !51, !52}
!50 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!51 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!52 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!53 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_VectorKind", scope: !4, file: !4, size: 64, align: 64, elements: !54)
!54 = !{!55, !56}
!55 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!56 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!57 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__compile_CompileFlag", scope: !4, file: !4, size: 32, align: 32, elements: !58)
!58 = !{!59, !60, !61, !62, !63, !64}
!59 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!60 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!61 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!62 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!63 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!64 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__sdl_EventType", scope: !4, file: !4, size: 32, align: 32, elements: !66)
!66 = !{!67, !68}
!67 = !DIEnumerator(name: "FIRST", value: 0)
!68 = !DIEnumerator(name: "QUIT", value: 256, isUnsigned: true)
!69 = !{i32 2, !"CodeView", i32 1}
!70 = !{i32 2, !"Debug Info Version", i32 3}
!71 = distinct !DISubprogram(name: "load_gl_fn", linkageName: "__gl_load_gl_fn", scope: !4, file: !4, line: 16, type: !72, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !77)
!72 = !DISubroutineType(types: !73)
!73 = !{!74, !75}
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!75 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !76, size: 64, align: 64, dwarfAddressSpace: 0)
!76 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!77 = !{}
!78 = !DILocation(line: 16, scope: !71)
!79 = !DILocalVariable(name: "name", scope: !71, file: !4, line: 16, type: !75)
!80 = !DILocation(line: 17, scope: !71)
!81 = !DILocalVariable(name: "p", scope: !71, file: !4, line: 17, type: !74)
!82 = !DILocation(line: 18, scope: !71)
!83 = !DILocation(line: 19, scope: !71)
!84 = !DILocation(line: 20, scope: !71)
!85 = !DILocation(line: 23, scope: !71)
!86 = distinct !DISubprogram(name: "load", linkageName: "__gl_load", scope: !4, file: !4, line: 28, type: !87, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !77)
!87 = !DISubroutineType(types: !88)
!88 = !{!89}
!89 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!90 = !DILocation(line: 29, scope: !86)
!91 = !DILocalVariable(name: "maybe_module", scope: !86, file: !4, line: 29, type: !74)
!92 = !DILocation(line: 30, scope: !86)
!93 = !DILocation(line: 31, scope: !86)
!94 = !DILocation(line: 33, scope: !86)
