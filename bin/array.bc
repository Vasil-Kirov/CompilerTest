; ModuleID = 'array'
source_filename = "array.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%slice.415 = type { i64, ptr }
%slice.416 = type { i64, ptr }
%__array_Header.381 = type { i64, %__mem_Allocator.380 }
%__mem_Allocator.380 = type { ptr, ptr, ptr }
%slice.417 = type { i64, ptr }

@__sdl_INIT_AUDIO = external global i64
@__sdl_INIT_VIDEO = external global i64
@__sdl_INIT_JOYSTICK = external global i64
@__sdl_INIT_HAPTIC = external global i64
@__sdl_INIT_GAMEPAD = external global i64
@__sdl_INIT_EVENTS = external global i64
@__sdl_INIT_SENSOR = external global i64
@__sdl_INIT_CAMERA = external global i64
@__sdl_WINDOW_FULLSCREEN = external global i64
@__sdl_WINDOW_OPENGL = external global i64
@__sdl_WINDOW_OCCLUDED = external global i64
@__sdl_WINDOW_HIDDEN = external global i64
@__sdl_WINDOW_BORDERLESS = external global i64
@__sdl_WINDOW_RESIZABLE = external global i64
@__sdl_WINDOW_MINIMIZED = external global i64
@__sdl_WINDOW_MAXIMIZED = external global i64
@__sdl_WINDOW_MOUSE_GRABBED = external global i64
@__sdl_WINDOW_INPUT_FOCUS = external global i64
@__sdl_WINDOW_MOUSE_FOCUS = external global i64
@__sdl_WINDOW_EXTERNAL = external global i64
@__sdl_WINDOW_MODAL = external global i64
@__sdl_WINDOW_HIGH_PIXEL_DENSITY = external global i64
@__sdl_WINDOW_MOUSE_CAPTURE = external global i64
@__sdl_WINDOW_MOUSE_RELATIVE_MODE = external global i64
@__sdl_WINDOW_ALWAYS_ON_TOP = external global i64
@__sdl_WINDOW_UTILITY = external global i64
@__sdl_WINDOW_TOOLTIP = external global i64
@__sdl_WINDOW_POPUP_MENU = external global i64
@__sdl_WINDOW_KEYBOARD_GRABBED = external global i64
@__sdl_WINDOW_VULKAN = external global i64
@__sdl_WINDOW_METAL = external global i64
@__sdl_WINDOW_TRANSPARENT = external global i64
@__sdl_WINDOW_NOT_FOCUSABLE = external global i64
@__gl_dll_module = external global ptr
@__init_INVALID_TYPE = external global i64
@__init_type_table = external global %slice.415
@__os_STD_INPUT_HANDLE = external global i32
@__os_STD_OUTPUT_HANDLE = external global i32
@__os_STD_ERROR_HANDLE = external global i32
@__os_INVALID_HANDLE_VALUE = external global ptr
@__os_CP_UTF7 = external global i32
@__os_CP_UTF8 = external global i32
@__os_MEM_COMMIT = external global i32
@__os_MEM_RESERVE = external global i32
@__os_MEM_RELEASE = external global i32
@__os_PAGE_NOACCESS = external global i32
@__os_PAGE_READONLY = external global i32
@__os_PAGE_READWRITE = external global i32
@__os_PAGE_WRITECOPY = external global i32
@__os_PAGE_EXECUTE = external global i32
@__os_PAGE_EXECUTE_READ = external global i32
@__os_PAGE_EXECUTE_READWRITE = external global i32
@__os_PAGE_EXECUTE_WRITECOPY = external global i32
@__os_PAGE_GUARD = external global i32
@__os_PAGE_NOCACHE = external global i32
@__os_PAGE_WRITECOMBINE = external global i32
@__str_CONTINUE_BIT = external global i8
@llvm.used = appending global [1 x ptr] [ptr @asan.module_ctor], section "llvm.metadata"
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_ctor, ptr null }]

define void @__array___GlobalInitializerFunction.0() {
block_0:
  ret void
}

declare i32 @__main_main()

declare i1 @SDL_Init(i32)

declare ptr @SDL_CreateWindow(ptr, i32, i32, i64)

declare void @SDL_GL_CreateContext(ptr, ptr)

declare i1 @SDL_GL_SwapWindow(ptr)

declare i1 @SDL_PollEvent(ptr)

declare ptr @SDL_GetError()

declare ptr @wglGetProcAddress(ptr)

declare ptr @GetProcAddress(ptr, ptr)

declare ptr @LoadLibraryA(ptr)

declare ptr @__gl_load_gl_fn(ptr)

declare i1 @__gl_load()

declare void @__init_global_initializers()

declare i64 @__init_get_struct_alignment(i64)

declare i64 @__init_get_type_alignment(i64)

declare i64 @__init_get_basic_type_size(ptr)

declare i64 @__init_get_struct_size(i64)

declare i64 @__init_get_type_size(i64)

declare i64 @__init_get_struct_member_offset(ptr, i64)

declare i32 @__main_main.1()

declare i32 @main()

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare void @__os_abort()

declare void @__os_assert(i1, ptr)

declare void @__os_print(ptr, i32)

declare ptr @__os_alloc(i64)

declare void @__os_free(ptr)

declare void @__io_push_string(ptr, ptr)

declare void @__io_format_uint(ptr, i64)

declare void @__io_format_int(ptr, i64)

declare void @__io_print_typetype(ptr, ptr)

declare void @__io_print_type(ptr, ptr)

declare void @__io_builder_to_string(ptr, ptr)

declare void @__io___internal_print(ptr, ptr, ptr)

declare void @__io_print(ptr, ptr)

declare void @__io_println(ptr, ptr)

declare i32 @__io_get_next(ptr)

declare void @"__io_format_float@type_*[]u32_f32_i32_@void"(i64, ptr, float, i32)

declare void @"__io_format_float@type_*[]u32_f64_i32_@void"(i64, ptr, double, i32)

declare ptr @__mem_generic_alloc(i64, ptr)

declare void @__mem_generic_free(ptr, ptr)

declare void @__mem_create_generic_allocator(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare i64 @__str_get_codepoint_size(ptr)

declare ptr @__str_advance(ptr)

declare ptr @__str__it_advance(ptr, i64, i64)

declare i32 @__str_deref(ptr)

declare i32 @__str_index(ptr, i64)

define void @"__array_add@*[]u32_u32_@void"(ptr %0, i32 %1) !dbg !68 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 4 %3, i8 0, i32 4, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false)
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %6, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %7, i8 0, i32 8, i1 false)
  %8 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %8, i8 0, i32 8, i1 false)
  store ptr %0, ptr %2, align 8, !dbg !81
  call void @llvm.dbg.value(metadata ptr %2, metadata !82, metadata !DIExpression()), !dbg !81
  store i32 %1, ptr %3, align 4, !dbg !81
  call void @llvm.dbg.value(metadata ptr %3, metadata !83, metadata !DIExpression()), !dbg !81
  %9 = load ptr, ptr %2, align 8, !dbg !84
  store ptr %9, ptr %4, align 8, !dbg !84
  call void @llvm.dbg.declare(metadata ptr %4, metadata !85, metadata !DIExpression()), !dbg !84
  %10 = load ptr, ptr %4, align 8, !dbg !86
  %11 = getelementptr inbounds %slice.416, ptr %10, i32 0, i32 1, !dbg !86
  %12 = load ptr, ptr %11, align 8, !dbg !86
  %13 = getelementptr %__array_Header.381, ptr %12, i64 -1, !dbg !86
  store ptr %13, ptr %5, align 8, !dbg !86
  call void @llvm.dbg.declare(metadata ptr %5, metadata !87, metadata !DIExpression()), !dbg !86
  %14 = load ptr, ptr %4, align 8, !dbg !108
  %15 = getelementptr inbounds %slice.416, ptr %14, i32 0, i32 0, !dbg !108
  %16 = load i64, ptr %15, align 8, !dbg !108
  %17 = load ptr, ptr %5, align 8, !dbg !108
  %18 = getelementptr inbounds %__array_Header.381, ptr %17, i32 0, i32 0, !dbg !108
  %19 = load i64, ptr %18, align 8, !dbg !108
  %20 = icmp sge i64 %16, %19, !dbg !108
  br i1 %20, label %block_1, label %block_2, !dbg !108

block_1:                                          ; preds = %block_0
  %21 = load ptr, ptr %5, align 8, !dbg !109
  %22 = getelementptr inbounds %__array_Header.381, ptr %21, i32 0, i32 0, !dbg !109
  %23 = load i64, ptr %22, align 8, !dbg !109
  %24 = mul i64 %23, 2, !dbg !109
  store i64 %24, ptr %6, align 8, !dbg !109
  call void @llvm.dbg.declare(metadata ptr %6, metadata !110, metadata !DIExpression()), !dbg !109
  %25 = load ptr, ptr %5, align 8, !dbg !111
  %26 = getelementptr inbounds %__array_Header.381, ptr %25, i32 0, i32 1, !dbg !111
  %27 = getelementptr inbounds %__mem_Allocator.380, ptr %26, i32 0, i32 0, !dbg !111
  %28 = load ptr, ptr %27, align 8, !dbg !111
  %29 = load i64, ptr %6, align 8, !dbg !111
  %30 = mul i64 %29, 4, !dbg !111
  %31 = add i64 %30, 32, !dbg !111
  %32 = load ptr, ptr %5, align 8, !dbg !111
  %33 = getelementptr inbounds %__array_Header.381, ptr %32, i32 0, i32 1, !dbg !111
  %34 = call ptr %28(i64 %31, ptr %33), !dbg !111
  store ptr %34, ptr %7, align 8, !dbg !111
  call void @llvm.dbg.declare(metadata ptr %7, metadata !112, metadata !DIExpression()), !dbg !111
  %35 = load ptr, ptr %7, align 8, !dbg !114
  %36 = icmp ne ptr %35, null, !dbg !114
  %37 = icmp eq i1 %36, false, !dbg !114
  br i1 %37, label %block_4, label %block_5, !dbg !114

block_4:                                          ; preds = %block_1
  %38 = load ptr, ptr %4, align 8, !dbg !115
  %39 = getelementptr inbounds %slice.416, ptr %38, i32 0, i32 1, !dbg !115
  store ptr null, ptr %39, align 8, !dbg !115
  %40 = load ptr, ptr %4, align 8, !dbg !116
  %41 = getelementptr inbounds %slice.416, ptr %40, i32 0, i32 0, !dbg !116
  store i64 0, ptr %41, align 8, !dbg !116
  ret void, !dbg !117

block_5:                                          ; preds = %block_1
  br label %block_6, !dbg !117

block_6:                                          ; preds = %block_5
  %42 = load ptr, ptr %7, align 8, !dbg !118
  store ptr %42, ptr %8, align 8, !dbg !118
  call void @llvm.dbg.declare(metadata ptr %8, metadata !119, metadata !DIExpression()), !dbg !118
  %43 = load ptr, ptr %8, align 8, !dbg !120
  %44 = getelementptr inbounds %__array_Header.381, ptr %43, i32 0, i32 0, !dbg !120
  %45 = load i64, ptr %6, align 8, !dbg !120
  store i64 %45, ptr %44, align 8, !dbg !120
  %46 = load ptr, ptr %8, align 8, !dbg !121
  %47 = getelementptr inbounds %__array_Header.381, ptr %46, i32 0, i32 1, !dbg !121
  %48 = load ptr, ptr %5, align 8, !dbg !121
  %49 = getelementptr inbounds %__array_Header.381, ptr %48, i32 0, i32 1, !dbg !121
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %47, ptr align 8 %49, i64 24, i1 false), !dbg !121
  %50 = load ptr, ptr %8, align 8, !dbg !122
  %51 = getelementptr %__array_Header.381, ptr %50, i64 1, !dbg !122
  %52 = load ptr, ptr %4, align 8, !dbg !122
  %53 = getelementptr inbounds %slice.416, ptr %52, i32 0, i32 1, !dbg !122
  %54 = load ptr, ptr %53, align 8, !dbg !122
  %55 = load ptr, ptr %4, align 8, !dbg !122
  %56 = getelementptr inbounds %slice.416, ptr %55, i32 0, i32 0, !dbg !122
  %57 = load i64, ptr %56, align 8, !dbg !122
  %58 = mul i64 %57, 4, !dbg !122
  %59 = call ptr @memcpy(ptr %51, ptr %54, i64 %58), !dbg !122
  %60 = load ptr, ptr %8, align 8, !dbg !123
  %61 = getelementptr inbounds %__array_Header.381, ptr %60, i32 0, i32 1, !dbg !123
  %62 = getelementptr inbounds %__mem_Allocator.380, ptr %61, i32 0, i32 1, !dbg !123
  %63 = load ptr, ptr %62, align 8, !dbg !123
  %64 = load ptr, ptr %5, align 8, !dbg !123
  %65 = load ptr, ptr %8, align 8, !dbg !123
  %66 = getelementptr inbounds %__array_Header.381, ptr %65, i32 0, i32 1, !dbg !123
  call void %63(ptr %64, ptr %66), !dbg !123
  %67 = load ptr, ptr %4, align 8, !dbg !124
  %68 = getelementptr inbounds %slice.416, ptr %67, i32 0, i32 1, !dbg !124
  %69 = load ptr, ptr %8, align 8, !dbg !124
  %70 = getelementptr %__array_Header.381, ptr %69, i64 1, !dbg !124
  store ptr %70, ptr %68, align 8, !dbg !124
  br label %block_3, !dbg !124

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !124

block_3:                                          ; preds = %block_2, %block_6
  %71 = load ptr, ptr %4, align 8, !dbg !125
  %72 = load ptr, ptr %4, align 8, !dbg !125
  %73 = getelementptr inbounds %slice.416, ptr %72, i32 0, i32 0, !dbg !125
  %74 = load i64, ptr %73, align 8, !dbg !125
  %75 = getelementptr inbounds %slice.416, ptr %71, i32 0, i32 1, !dbg !125
  %76 = load ptr, ptr %75, align 8, !dbg !125
  %77 = getelementptr i32, ptr %76, i64 %74, !dbg !125
  %78 = load i32, ptr %3, align 4, !dbg !125
  store i32 %78, ptr %77, align 4, !dbg !125
  %79 = load ptr, ptr %4, align 8, !dbg !126
  %80 = getelementptr inbounds %slice.416, ptr %79, i32 0, i32 0, !dbg !126
  %81 = load ptr, ptr %4, align 8, !dbg !126
  %82 = getelementptr inbounds %slice.416, ptr %81, i32 0, i32 0, !dbg !126
  %83 = load i64, ptr %82, align 8, !dbg !126
  %84 = add i64 %83, 1, !dbg !126
  store i64 %84, ptr %80, align 8, !dbg !126
  ret void, !dbg !127
}

define void @"__array_create@type_*__mem_Allocator_@[]u8"(ptr %0, i64 %1, ptr %2) !dbg !128 {
block_0:
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %6, i8 0, i32 8, i1 false)
  %7 = alloca %slice.417, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %7, i8 0, i32 16, i1 false)
  %8 = alloca ptr, align 8
  %9 = alloca %__mem_Allocator.380, align 8
  %10 = alloca %slice.417, align 8
  %11 = alloca %slice.417, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %8, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %10, i8 0, i32 16, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %11, i8 0, i32 16, i1 false)
  store i64 %1, ptr %3, align 8, !dbg !137
  call void @llvm.dbg.value(metadata ptr %3, metadata !138, metadata !DIExpression()), !dbg !137
  store ptr %2, ptr %4, align 8, !dbg !137
  call void @llvm.dbg.value(metadata ptr %4, metadata !139, metadata !DIExpression()), !dbg !137
  store i64 8, ptr %5, align 8, !dbg !140
  call void @llvm.dbg.declare(metadata ptr %5, metadata !141, metadata !DIExpression()), !dbg !140
  %12 = load ptr, ptr %4, align 8, !dbg !142
  %13 = getelementptr inbounds %__mem_Allocator.380, ptr %12, i32 0, i32 0, !dbg !142
  %14 = load ptr, ptr %13, align 8, !dbg !142
  %15 = load i64, ptr %5, align 8, !dbg !142
  %16 = mul i64 %15, 1, !dbg !142
  %17 = add i64 %16, 32, !dbg !142
  %18 = load ptr, ptr %4, align 8, !dbg !142
  %19 = call ptr %14(i64 %17, ptr %18), !dbg !142
  store ptr %19, ptr %6, align 8, !dbg !142
  call void @llvm.dbg.declare(metadata ptr %6, metadata !143, metadata !DIExpression()), !dbg !142
  %20 = load ptr, ptr %6, align 8, !dbg !144
  %21 = icmp ne ptr %20, null, !dbg !144
  %22 = icmp eq i1 %21, false, !dbg !144
  br i1 %22, label %block_1, label %block_2, !dbg !144

block_1:                                          ; preds = %block_0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false), !dbg !145
  ret void, !dbg !145

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !145

block_3:                                          ; preds = %block_2
  %23 = load ptr, ptr %6, align 8, !dbg !146
  store ptr %23, ptr %8, align 8, !dbg !146
  call void @llvm.dbg.declare(metadata ptr %8, metadata !147, metadata !DIExpression()), !dbg !146
  %24 = load ptr, ptr %8, align 8, !dbg !148
  %25 = getelementptr inbounds %__array_Header.381, ptr %24, i32 0, i32 0, !dbg !148
  %26 = load i64, ptr %5, align 8, !dbg !148
  store i64 %26, ptr %25, align 8, !dbg !148
  %27 = load ptr, ptr %8, align 8, !dbg !149
  %28 = getelementptr inbounds %__array_Header.381, ptr %27, i32 0, i32 1, !dbg !149
  %29 = load ptr, ptr %4, align 8, !dbg !149
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %29, i64 24, i1 false), !dbg !149
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %9, i64 24, i1 false), !dbg !149
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %10, i64 16, i1 false), !dbg !150
  call void @llvm.dbg.declare(metadata ptr %11, metadata !151, metadata !DIExpression()), !dbg !150
  %30 = getelementptr inbounds %slice.417, ptr %11, i32 0, i32 1, !dbg !152
  %31 = load ptr, ptr %8, align 8, !dbg !152
  %32 = getelementptr %__array_Header.381, ptr %31, i64 1, !dbg !152
  store ptr %32, ptr %30, align 8, !dbg !152
  %33 = getelementptr inbounds %slice.417, ptr %11, i32 0, i32 0, !dbg !153
  store i64 0, ptr %33, align 8, !dbg !153
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 16, i1 false), !dbg !154
  ret void, !dbg !154
}

define void @"__array_add@*[]u8_u8_@void"(ptr %0, i8 %1) !dbg !155 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i8, align 1
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 1 %3, i8 0, i32 1, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false)
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %6, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %7, i8 0, i32 8, i1 false)
  %8 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %8, i8 0, i32 8, i1 false)
  store ptr %0, ptr %2, align 8, !dbg !159
  call void @llvm.dbg.value(metadata ptr %2, metadata !160, metadata !DIExpression()), !dbg !159
  store i8 %1, ptr %3, align 1, !dbg !159
  call void @llvm.dbg.value(metadata ptr %3, metadata !161, metadata !DIExpression()), !dbg !159
  %9 = load ptr, ptr %2, align 8, !dbg !162
  store ptr %9, ptr %4, align 8, !dbg !162
  call void @llvm.dbg.declare(metadata ptr %4, metadata !163, metadata !DIExpression()), !dbg !162
  %10 = load ptr, ptr %4, align 8, !dbg !164
  %11 = getelementptr inbounds %slice.417, ptr %10, i32 0, i32 1, !dbg !164
  %12 = load ptr, ptr %11, align 8, !dbg !164
  %13 = getelementptr %__array_Header.381, ptr %12, i64 -1, !dbg !164
  store ptr %13, ptr %5, align 8, !dbg !164
  call void @llvm.dbg.declare(metadata ptr %5, metadata !165, metadata !DIExpression()), !dbg !164
  %14 = load ptr, ptr %4, align 8, !dbg !166
  %15 = getelementptr inbounds %slice.417, ptr %14, i32 0, i32 0, !dbg !166
  %16 = load i64, ptr %15, align 8, !dbg !166
  %17 = load ptr, ptr %5, align 8, !dbg !166
  %18 = getelementptr inbounds %__array_Header.381, ptr %17, i32 0, i32 0, !dbg !166
  %19 = load i64, ptr %18, align 8, !dbg !166
  %20 = icmp sge i64 %16, %19, !dbg !166
  br i1 %20, label %block_1, label %block_2, !dbg !166

block_1:                                          ; preds = %block_0
  %21 = load ptr, ptr %5, align 8, !dbg !167
  %22 = getelementptr inbounds %__array_Header.381, ptr %21, i32 0, i32 0, !dbg !167
  %23 = load i64, ptr %22, align 8, !dbg !167
  %24 = mul i64 %23, 2, !dbg !167
  store i64 %24, ptr %6, align 8, !dbg !167
  call void @llvm.dbg.declare(metadata ptr %6, metadata !168, metadata !DIExpression()), !dbg !167
  %25 = load ptr, ptr %5, align 8, !dbg !169
  %26 = getelementptr inbounds %__array_Header.381, ptr %25, i32 0, i32 1, !dbg !169
  %27 = getelementptr inbounds %__mem_Allocator.380, ptr %26, i32 0, i32 0, !dbg !169
  %28 = load ptr, ptr %27, align 8, !dbg !169
  %29 = load i64, ptr %6, align 8, !dbg !169
  %30 = mul i64 %29, 1, !dbg !169
  %31 = add i64 %30, 32, !dbg !169
  %32 = load ptr, ptr %5, align 8, !dbg !169
  %33 = getelementptr inbounds %__array_Header.381, ptr %32, i32 0, i32 1, !dbg !169
  %34 = call ptr %28(i64 %31, ptr %33), !dbg !169
  store ptr %34, ptr %7, align 8, !dbg !169
  call void @llvm.dbg.declare(metadata ptr %7, metadata !170, metadata !DIExpression()), !dbg !169
  %35 = load ptr, ptr %7, align 8, !dbg !171
  %36 = icmp ne ptr %35, null, !dbg !171
  %37 = icmp eq i1 %36, false, !dbg !171
  br i1 %37, label %block_4, label %block_5, !dbg !171

block_4:                                          ; preds = %block_1
  %38 = load ptr, ptr %4, align 8, !dbg !172
  %39 = getelementptr inbounds %slice.417, ptr %38, i32 0, i32 1, !dbg !172
  store ptr null, ptr %39, align 8, !dbg !172
  %40 = load ptr, ptr %4, align 8, !dbg !173
  %41 = getelementptr inbounds %slice.417, ptr %40, i32 0, i32 0, !dbg !173
  store i64 0, ptr %41, align 8, !dbg !173
  ret void, !dbg !174

block_5:                                          ; preds = %block_1
  br label %block_6, !dbg !174

block_6:                                          ; preds = %block_5
  %42 = load ptr, ptr %7, align 8, !dbg !175
  store ptr %42, ptr %8, align 8, !dbg !175
  call void @llvm.dbg.declare(metadata ptr %8, metadata !176, metadata !DIExpression()), !dbg !175
  %43 = load ptr, ptr %8, align 8, !dbg !177
  %44 = getelementptr inbounds %__array_Header.381, ptr %43, i32 0, i32 0, !dbg !177
  %45 = load i64, ptr %6, align 8, !dbg !177
  store i64 %45, ptr %44, align 8, !dbg !177
  %46 = load ptr, ptr %8, align 8, !dbg !178
  %47 = getelementptr inbounds %__array_Header.381, ptr %46, i32 0, i32 1, !dbg !178
  %48 = load ptr, ptr %5, align 8, !dbg !178
  %49 = getelementptr inbounds %__array_Header.381, ptr %48, i32 0, i32 1, !dbg !178
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %47, ptr align 8 %49, i64 24, i1 false), !dbg !178
  %50 = load ptr, ptr %8, align 8, !dbg !179
  %51 = getelementptr %__array_Header.381, ptr %50, i64 1, !dbg !179
  %52 = load ptr, ptr %4, align 8, !dbg !179
  %53 = getelementptr inbounds %slice.417, ptr %52, i32 0, i32 1, !dbg !179
  %54 = load ptr, ptr %53, align 8, !dbg !179
  %55 = load ptr, ptr %4, align 8, !dbg !179
  %56 = getelementptr inbounds %slice.417, ptr %55, i32 0, i32 0, !dbg !179
  %57 = load i64, ptr %56, align 8, !dbg !179
  %58 = mul i64 %57, 1, !dbg !179
  %59 = call ptr @memcpy(ptr %51, ptr %54, i64 %58), !dbg !179
  %60 = load ptr, ptr %8, align 8, !dbg !180
  %61 = getelementptr inbounds %__array_Header.381, ptr %60, i32 0, i32 1, !dbg !180
  %62 = getelementptr inbounds %__mem_Allocator.380, ptr %61, i32 0, i32 1, !dbg !180
  %63 = load ptr, ptr %62, align 8, !dbg !180
  %64 = load ptr, ptr %5, align 8, !dbg !180
  %65 = load ptr, ptr %8, align 8, !dbg !180
  %66 = getelementptr inbounds %__array_Header.381, ptr %65, i32 0, i32 1, !dbg !180
  call void %63(ptr %64, ptr %66), !dbg !180
  %67 = load ptr, ptr %4, align 8, !dbg !181
  %68 = getelementptr inbounds %slice.417, ptr %67, i32 0, i32 1, !dbg !181
  %69 = load ptr, ptr %8, align 8, !dbg !181
  %70 = getelementptr %__array_Header.381, ptr %69, i64 1, !dbg !181
  store ptr %70, ptr %68, align 8, !dbg !181
  br label %block_3, !dbg !181

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !181

block_3:                                          ; preds = %block_2, %block_6
  %71 = load ptr, ptr %4, align 8, !dbg !182
  %72 = load ptr, ptr %4, align 8, !dbg !182
  %73 = getelementptr inbounds %slice.417, ptr %72, i32 0, i32 0, !dbg !182
  %74 = load i64, ptr %73, align 8, !dbg !182
  %75 = getelementptr inbounds %slice.417, ptr %71, i32 0, i32 1, !dbg !182
  %76 = load ptr, ptr %75, align 8, !dbg !182
  %77 = getelementptr i8, ptr %76, i64 %74, !dbg !182
  %78 = load i8, ptr %3, align 1, !dbg !182
  store i8 %78, ptr %77, align 1, !dbg !182
  %79 = load ptr, ptr %4, align 8, !dbg !183
  %80 = getelementptr inbounds %slice.417, ptr %79, i32 0, i32 0, !dbg !183
  %81 = load ptr, ptr %4, align 8, !dbg !183
  %82 = getelementptr inbounds %slice.417, ptr %81, i32 0, i32 0, !dbg !183
  %83 = load i64, ptr %82, align 8, !dbg !183
  %84 = add i64 %83, 1, !dbg !183
  store i64 %84, ptr %80, align 8, !dbg !183
  ret void, !dbg !184
}

define void @"__array_create@type_*__mem_Allocator_@[]u32"(ptr %0, i64 %1, ptr %2) !dbg !185 {
block_0:
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %6, i8 0, i32 8, i1 false)
  %7 = alloca %slice.416, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %7, i8 0, i32 16, i1 false)
  %8 = alloca ptr, align 8
  %9 = alloca %__mem_Allocator.380, align 8
  %10 = alloca %slice.416, align 8
  %11 = alloca %slice.416, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %8, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %10, i8 0, i32 16, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %11, i8 0, i32 16, i1 false)
  store i64 %1, ptr %3, align 8, !dbg !188
  call void @llvm.dbg.value(metadata ptr %3, metadata !189, metadata !DIExpression()), !dbg !188
  store ptr %2, ptr %4, align 8, !dbg !188
  call void @llvm.dbg.value(metadata ptr %4, metadata !190, metadata !DIExpression()), !dbg !188
  store i64 8, ptr %5, align 8, !dbg !191
  call void @llvm.dbg.declare(metadata ptr %5, metadata !192, metadata !DIExpression()), !dbg !191
  %12 = load ptr, ptr %4, align 8, !dbg !193
  %13 = getelementptr inbounds %__mem_Allocator.380, ptr %12, i32 0, i32 0, !dbg !193
  %14 = load ptr, ptr %13, align 8, !dbg !193
  %15 = load i64, ptr %5, align 8, !dbg !193
  %16 = mul i64 %15, 4, !dbg !193
  %17 = add i64 %16, 32, !dbg !193
  %18 = load ptr, ptr %4, align 8, !dbg !193
  %19 = call ptr %14(i64 %17, ptr %18), !dbg !193
  store ptr %19, ptr %6, align 8, !dbg !193
  call void @llvm.dbg.declare(metadata ptr %6, metadata !194, metadata !DIExpression()), !dbg !193
  %20 = load ptr, ptr %6, align 8, !dbg !195
  %21 = icmp ne ptr %20, null, !dbg !195
  %22 = icmp eq i1 %21, false, !dbg !195
  br i1 %22, label %block_1, label %block_2, !dbg !195

block_1:                                          ; preds = %block_0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false), !dbg !196
  ret void, !dbg !196

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !196

block_3:                                          ; preds = %block_2
  %23 = load ptr, ptr %6, align 8, !dbg !197
  store ptr %23, ptr %8, align 8, !dbg !197
  call void @llvm.dbg.declare(metadata ptr %8, metadata !198, metadata !DIExpression()), !dbg !197
  %24 = load ptr, ptr %8, align 8, !dbg !199
  %25 = getelementptr inbounds %__array_Header.381, ptr %24, i32 0, i32 0, !dbg !199
  %26 = load i64, ptr %5, align 8, !dbg !199
  store i64 %26, ptr %25, align 8, !dbg !199
  %27 = load ptr, ptr %8, align 8, !dbg !200
  %28 = getelementptr inbounds %__array_Header.381, ptr %27, i32 0, i32 1, !dbg !200
  %29 = load ptr, ptr %4, align 8, !dbg !200
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %29, i64 24, i1 false), !dbg !200
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %9, i64 24, i1 false), !dbg !200
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %10, i64 16, i1 false), !dbg !201
  call void @llvm.dbg.declare(metadata ptr %11, metadata !202, metadata !DIExpression()), !dbg !201
  %30 = getelementptr inbounds %slice.416, ptr %11, i32 0, i32 1, !dbg !203
  %31 = load ptr, ptr %8, align 8, !dbg !203
  %32 = getelementptr %__array_Header.381, ptr %31, i64 1, !dbg !203
  store ptr %32, ptr %30, align 8, !dbg !203
  %33 = getelementptr inbounds %slice.416, ptr %11, i32 0, i32 0, !dbg !204
  store i64 0, ptr %33, align 8, !dbg !204
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 16, i1 false), !dbg !205
  ret void, !dbg !205
}

define void @"__array_free@*[]u32_@void"(ptr %0) !dbg !206 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false)
  store ptr %0, ptr %1, align 8, !dbg !209
  call void @llvm.dbg.value(metadata ptr %1, metadata !210, metadata !DIExpression()), !dbg !209
  %4 = load ptr, ptr %1, align 8, !dbg !211
  store ptr %4, ptr %2, align 8, !dbg !211
  call void @llvm.dbg.declare(metadata ptr %2, metadata !212, metadata !DIExpression()), !dbg !211
  %5 = load ptr, ptr %2, align 8, !dbg !213
  %6 = getelementptr inbounds %slice.416, ptr %5, i32 0, i32 1, !dbg !213
  %7 = load ptr, ptr %6, align 8, !dbg !213
  %8 = getelementptr %__array_Header.381, ptr %7, i64 -1, !dbg !213
  store ptr %8, ptr %3, align 8, !dbg !213
  call void @llvm.dbg.declare(metadata ptr %3, metadata !214, metadata !DIExpression()), !dbg !213
  %9 = load ptr, ptr %3, align 8, !dbg !215
  %10 = getelementptr inbounds %__array_Header.381, ptr %9, i32 0, i32 1, !dbg !215
  %11 = getelementptr inbounds %__mem_Allocator.380, ptr %10, i32 0, i32 1, !dbg !215
  %12 = load ptr, ptr %11, align 8, !dbg !215
  %13 = load ptr, ptr %3, align 8, !dbg !215
  %14 = load ptr, ptr %3, align 8, !dbg !215
  %15 = getelementptr inbounds %__array_Header.381, ptr %14, i32 0, i32 1, !dbg !215
  call void %12(ptr %13, ptr %15), !dbg !215
  %16 = load ptr, ptr %2, align 8, !dbg !216
  %17 = getelementptr inbounds %slice.416, ptr %16, i32 0, i32 1, !dbg !216
  store ptr null, ptr %17, align 8, !dbg !216
  %18 = load ptr, ptr %2, align 8, !dbg !217
  %19 = getelementptr inbounds %slice.416, ptr %18, i32 0, i32 0, !dbg !217
  store i64 0, ptr %19, align 8, !dbg !217
  ret void, !dbg !218
}

define void @"__array_free@*[]u8_@void"(ptr %0) !dbg !219 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false)
  store ptr %0, ptr %1, align 8, !dbg !222
  call void @llvm.dbg.value(metadata ptr %1, metadata !223, metadata !DIExpression()), !dbg !222
  %4 = load ptr, ptr %1, align 8, !dbg !224
  store ptr %4, ptr %2, align 8, !dbg !224
  call void @llvm.dbg.declare(metadata ptr %2, metadata !225, metadata !DIExpression()), !dbg !224
  %5 = load ptr, ptr %2, align 8, !dbg !226
  %6 = getelementptr inbounds %slice.417, ptr %5, i32 0, i32 1, !dbg !226
  %7 = load ptr, ptr %6, align 8, !dbg !226
  %8 = getelementptr %__array_Header.381, ptr %7, i64 -1, !dbg !226
  store ptr %8, ptr %3, align 8, !dbg !226
  call void @llvm.dbg.declare(metadata ptr %3, metadata !227, metadata !DIExpression()), !dbg !226
  %9 = load ptr, ptr %3, align 8, !dbg !228
  %10 = getelementptr inbounds %__array_Header.381, ptr %9, i32 0, i32 1, !dbg !228
  %11 = getelementptr inbounds %__mem_Allocator.380, ptr %10, i32 0, i32 1, !dbg !228
  %12 = load ptr, ptr %11, align 8, !dbg !228
  %13 = load ptr, ptr %3, align 8, !dbg !228
  %14 = load ptr, ptr %3, align 8, !dbg !228
  %15 = getelementptr inbounds %__array_Header.381, ptr %14, i32 0, i32 1, !dbg !228
  call void %12(ptr %13, ptr %15), !dbg !228
  %16 = load ptr, ptr %2, align 8, !dbg !229
  %17 = getelementptr inbounds %slice.417, ptr %16, i32 0, i32 1, !dbg !229
  store ptr null, ptr %17, align 8, !dbg !229
  %18 = load ptr, ptr %2, align 8, !dbg !230
  %19 = getelementptr inbounds %slice.417, ptr %18, i32 0, i32 0, !dbg !230
  store i64 0, ptr %19, align 8, !dbg !230
  ret void, !dbg !231
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

declare void @__asan_before_dynamic_init(i64)

declare void @__asan_after_dynamic_init()

declare void @__asan_register_globals(i64, i64)

declare void @__asan_unregister_globals(i64, i64)

declare void @__asan_register_image_globals(i64)

declare void @__asan_unregister_image_globals(i64)

declare void @__asan_register_elf_globals(i64, i64, i64)

declare void @__asan_unregister_elf_globals(i64, i64, i64)

declare void @__asan_init()

; Function Attrs: nounwind
define internal void @asan.module_ctor() #3 {
  call void @__asan_init()
  call void @__asan_version_mismatch_check_v8()
  ret void
}

declare void @__asan_version_mismatch_check_v8()

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!66, !67}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "array.rcp", directory: "E:\\C_Projects\\ReComp\\std")
!2 = !{!3, !15, !36, !45, !50, !54, !62, !3, !15, !36, !45, !50, !54}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_TypeKind", scope: !1, file: !1, size: 64, align: 64, elements: !4)
!4 = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14}
!5 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!6 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!7 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!8 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!9 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!10 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!11 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!12 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!13 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!14 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_BasicKind", scope: !1, file: !1, size: 64, align: 64, elements: !16)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!17 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_BasicFlag", scope: !1, file: !1, size: 32, align: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44}
!38 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!42 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!43 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!44 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_StructFlag", scope: !1, file: !1, size: 32, align: 32, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_VectorKind", scope: !1, file: !1, size: 64, align: 64, elements: !51)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__compile_CompileFlag", scope: !1, file: !1, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61}
!56 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!59 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!60 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!61 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!62 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__sdl_EventType", scope: !1, file: !1, size: 32, align: 32, elements: !63)
!63 = !{!64, !65}
!64 = !DIEnumerator(name: "FIRST", value: 0)
!65 = !DIEnumerator(name: "QUIT", value: 256, isUnsigned: true)
!66 = !{i32 2, !"CodeView", i32 1}
!67 = !{i32 2, !"Debug Info Version", i32 3}
!68 = distinct !DISubprogram(name: "add@*[]u32_u32_@void", linkageName: "__array_add@*[]u32_u32_@void", scope: !1, file: !1, line: 26, type: !69, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !80)
!69 = !DISubroutineType(types: !70)
!70 = !{null, !71, !79}
!71 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*[]u32", baseType: !72, size: 64, align: 64, dwarfAddressSpace: 0)
!72 = !DICompositeType(tag: DW_TAG_structure_type, scope: !73, file: !73, size: 128, align: 64, elements: !74)
!73 = !DIFile(filename: "io.rcp", directory: "E:\\C_Projects\\ReComp\\std")
!74 = !{!75, !77}
!75 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !73, file: !73, baseType: !76, size: 64, align: 64)
!76 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !73, file: !73, baseType: !78, size: 64, align: 64, offset: 64)
!78 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u32", baseType: !79, size: 64, align: 64, dwarfAddressSpace: 0)
!79 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!80 = !{}
!81 = !DILocation(line: 26, scope: !68)
!82 = !DILocalVariable(name: "arg_arr", scope: !68, file: !1, line: 26, type: !71)
!83 = !DILocalVariable(name: "item", arg: 1, scope: !68, file: !1, line: 26, type: !79)
!84 = !DILocation(line: 27, scope: !68)
!85 = !DILocalVariable(name: "arr", scope: !68, file: !1, line: 27, type: !71)
!86 = !DILocation(line: 28, scope: !68)
!87 = !DILocalVariable(name: "header", scope: !68, file: !1, line: 28, type: !88)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__array_Header", baseType: !89, size: 64, align: 64, dwarfAddressSpace: 0)
!89 = !DICompositeType(tag: DW_TAG_structure_type, name: "__array_Header", scope: !1, file: !1, size: 256, elements: !90)
!90 = !{!91, !92}
!91 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1, file: !1, baseType: !76, size: 64, align: 64)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !1, file: !1, baseType: !93, size: 192, align: 64, offset: 64)
!93 = !DICompositeType(tag: DW_TAG_structure_type, name: "__mem_Allocator", scope: !1, file: !1, size: 192, elements: !94)
!94 = !{!95, !103, !107}
!95 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1, file: !1, baseType: !96, size: 64, align: 64)
!96 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(int, *__mem_Allocator) -> ?*", baseType: !97, size: 64, align: 64, dwarfAddressSpace: 0)
!97 = !DISubroutineType(types: !98)
!98 = !{!99, !76, !100}
!99 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!100 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__mem_Allocator", baseType: !101, size: 64, align: 64, dwarfAddressSpace: 0)
!101 = !DICompositeType(tag: DW_TAG_structure_type, name: "__mem_Allocator", scope: !102, file: !102, size: 192, align: 64, flags: DIFlagFwdDecl)
!102 = !DIFile(filename: "main.rcp", directory: "E:\\Non_C_Projects\\RCPProjects\\graph\\src")
!103 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !1, file: !1, baseType: !104, size: 64, align: 64, offset: 64)
!104 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(*, *__mem_Allocator)", baseType: !105, size: 64, align: 64, dwarfAddressSpace: 0)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !99, !100}
!107 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !99, size: 64, align: 64, offset: 128)
!108 = !DILocation(line: 29, scope: !68)
!109 = !DILocation(line: 30, scope: !68)
!110 = !DILocalVariable(name: "new_capacity", scope: !68, file: !1, line: 30, type: !76)
!111 = !DILocation(line: 31, scope: !68)
!112 = !DILocalVariable(name: "maybe_ptr", scope: !68, file: !1, line: 31, type: !113)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "?*__array_Header", baseType: !89, size: 64, align: 64, dwarfAddressSpace: 0)
!114 = !DILocation(line: 32, scope: !68)
!115 = !DILocation(line: 33, scope: !68)
!116 = !DILocation(line: 34, scope: !68)
!117 = !DILocation(line: 35, scope: !68)
!118 = !DILocation(line: 38, scope: !68)
!119 = !DILocalVariable(name: "ptr", scope: !68, file: !1, line: 38, type: !88)
!120 = !DILocation(line: 39, scope: !68)
!121 = !DILocation(line: 40, scope: !68)
!122 = !DILocation(line: 41, scope: !68)
!123 = !DILocation(line: 42, scope: !68)
!124 = !DILocation(line: 43, scope: !68)
!125 = !DILocation(line: 46, scope: !68)
!126 = !DILocation(line: 47, scope: !68)
!127 = !DILocation(line: 48, scope: !68)
!128 = distinct !DISubprogram(name: "create@type_*__mem_Allocator_@[]u8", linkageName: "__array_create@type_*__mem_Allocator_@[]u8", scope: !1, file: !1, line: 10, type: !129, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !80)
!129 = !DISubroutineType(types: !130)
!130 = !{!131, !136, !100}
!131 = !DICompositeType(tag: DW_TAG_structure_type, scope: !73, file: !73, size: 128, align: 64, elements: !132)
!132 = !{!75, !133}
!133 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !73, file: !73, baseType: !134, size: 64, align: 64, offset: 64)
!134 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !135, size: 64, align: 64, dwarfAddressSpace: 0)
!135 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!136 = !DIBasicType(name: "type", size: 64, encoding: DW_ATE_unsigned)
!137 = !DILocation(line: 10, scope: !128)
!138 = !DILocalVariable(name: "T", scope: !128, file: !1, line: 10, type: !136)
!139 = !DILocalVariable(name: "allocator", arg: 1, scope: !128, file: !1, line: 10, type: !100)
!140 = !DILocation(line: 11, scope: !128)
!141 = !DILocalVariable(name: "INITIAL_CAPACITY", scope: !128, file: !1, line: 11, type: !76)
!142 = !DILocation(line: 12, scope: !128)
!143 = !DILocalVariable(name: "maybe_ptr", scope: !128, file: !1, line: 12, type: !113)
!144 = !DILocation(line: 13, scope: !128)
!145 = !DILocation(line: 14, scope: !128)
!146 = !DILocation(line: 16, scope: !128)
!147 = !DILocalVariable(name: "ptr", scope: !128, file: !1, line: 16, type: !88)
!148 = !DILocation(line: 17, scope: !128)
!149 = !DILocation(line: 18, scope: !128)
!150 = !DILocation(line: 20, scope: !128)
!151 = !DILocalVariable(name: "res", scope: !128, file: !1, line: 20, type: !131)
!152 = !DILocation(line: 21, scope: !128)
!153 = !DILocation(line: 22, scope: !128)
!154 = !DILocation(line: 23, scope: !128)
!155 = distinct !DISubprogram(name: "add@*[]u8_u8_@void", linkageName: "__array_add@*[]u8_u8_@void", scope: !1, file: !1, line: 26, type: !156, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !80)
!156 = !DISubroutineType(types: !157)
!157 = !{null, !158, !135}
!158 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*[]u8", baseType: !131, size: 64, align: 64, dwarfAddressSpace: 0)
!159 = !DILocation(line: 26, scope: !155)
!160 = !DILocalVariable(name: "arg_arr", scope: !155, file: !1, line: 26, type: !158)
!161 = !DILocalVariable(name: "item", arg: 1, scope: !155, file: !1, line: 26, type: !135)
!162 = !DILocation(line: 27, scope: !155)
!163 = !DILocalVariable(name: "arr", scope: !155, file: !1, line: 27, type: !158)
!164 = !DILocation(line: 28, scope: !155)
!165 = !DILocalVariable(name: "header", scope: !155, file: !1, line: 28, type: !88)
!166 = !DILocation(line: 29, scope: !155)
!167 = !DILocation(line: 30, scope: !155)
!168 = !DILocalVariable(name: "new_capacity", scope: !155, file: !1, line: 30, type: !76)
!169 = !DILocation(line: 31, scope: !155)
!170 = !DILocalVariable(name: "maybe_ptr", scope: !155, file: !1, line: 31, type: !113)
!171 = !DILocation(line: 32, scope: !155)
!172 = !DILocation(line: 33, scope: !155)
!173 = !DILocation(line: 34, scope: !155)
!174 = !DILocation(line: 35, scope: !155)
!175 = !DILocation(line: 38, scope: !155)
!176 = !DILocalVariable(name: "ptr", scope: !155, file: !1, line: 38, type: !88)
!177 = !DILocation(line: 39, scope: !155)
!178 = !DILocation(line: 40, scope: !155)
!179 = !DILocation(line: 41, scope: !155)
!180 = !DILocation(line: 42, scope: !155)
!181 = !DILocation(line: 43, scope: !155)
!182 = !DILocation(line: 46, scope: !155)
!183 = !DILocation(line: 47, scope: !155)
!184 = !DILocation(line: 48, scope: !155)
!185 = distinct !DISubprogram(name: "create@type_*__mem_Allocator_@[]u32", linkageName: "__array_create@type_*__mem_Allocator_@[]u32", scope: !1, file: !1, line: 10, type: !186, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !80)
!186 = !DISubroutineType(types: !187)
!187 = !{!72, !136, !100}
!188 = !DILocation(line: 10, scope: !185)
!189 = !DILocalVariable(name: "T", scope: !185, file: !1, line: 10, type: !136)
!190 = !DILocalVariable(name: "allocator", arg: 1, scope: !185, file: !1, line: 10, type: !100)
!191 = !DILocation(line: 11, scope: !185)
!192 = !DILocalVariable(name: "INITIAL_CAPACITY", scope: !185, file: !1, line: 11, type: !76)
!193 = !DILocation(line: 12, scope: !185)
!194 = !DILocalVariable(name: "maybe_ptr", scope: !185, file: !1, line: 12, type: !113)
!195 = !DILocation(line: 13, scope: !185)
!196 = !DILocation(line: 14, scope: !185)
!197 = !DILocation(line: 16, scope: !185)
!198 = !DILocalVariable(name: "ptr", scope: !185, file: !1, line: 16, type: !88)
!199 = !DILocation(line: 17, scope: !185)
!200 = !DILocation(line: 18, scope: !185)
!201 = !DILocation(line: 20, scope: !185)
!202 = !DILocalVariable(name: "res", scope: !185, file: !1, line: 20, type: !72)
!203 = !DILocation(line: 21, scope: !185)
!204 = !DILocation(line: 22, scope: !185)
!205 = !DILocation(line: 23, scope: !185)
!206 = distinct !DISubprogram(name: "free@*[]u32_@void", linkageName: "__array_free@*[]u32_@void", scope: !1, file: !1, line: 50, type: !207, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !80)
!207 = !DISubroutineType(types: !208)
!208 = !{null, !71}
!209 = !DILocation(line: 50, scope: !206)
!210 = !DILocalVariable(name: "arg_arr", scope: !206, file: !1, line: 50, type: !71)
!211 = !DILocation(line: 51, scope: !206)
!212 = !DILocalVariable(name: "arr", scope: !206, file: !1, line: 51, type: !71)
!213 = !DILocation(line: 52, scope: !206)
!214 = !DILocalVariable(name: "header", scope: !206, file: !1, line: 52, type: !88)
!215 = !DILocation(line: 53, scope: !206)
!216 = !DILocation(line: 54, scope: !206)
!217 = !DILocation(line: 55, scope: !206)
!218 = !DILocation(line: 56, scope: !206)
!219 = distinct !DISubprogram(name: "free@*[]u8_@void", linkageName: "__array_free@*[]u8_@void", scope: !1, file: !1, line: 50, type: !220, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !80)
!220 = !DISubroutineType(types: !221)
!221 = !{null, !158}
!222 = !DILocation(line: 50, scope: !219)
!223 = !DILocalVariable(name: "arg_arr", scope: !219, file: !1, line: 50, type: !158)
!224 = !DILocation(line: 51, scope: !219)
!225 = !DILocalVariable(name: "arr", scope: !219, file: !1, line: 51, type: !158)
!226 = !DILocation(line: 52, scope: !219)
!227 = !DILocalVariable(name: "header", scope: !219, file: !1, line: 52, type: !88)
!228 = !DILocation(line: 53, scope: !219)
!229 = !DILocation(line: 54, scope: !219)
!230 = !DILocation(line: 55, scope: !219)
!231 = !DILocation(line: 56, scope: !219)
