; ModuleID = 'str'
source_filename = "strings.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%slice.362 = type { i64, ptr }
%string.314 = type { ptr, i64 }

$__str_CONTINUE_BIT = comdat nodeduplicate

@__sdl_INIT_AUDIO = external global i64
@__sdl_INIT_VIDEO = external global i64
@__sdl_INIT_JOYSTICK = external global i64
@__sdl_INIT_HAPTIC = external global i64
@__sdl_INIT_GAMEPAD = external global i64
@__sdl_INIT_EVENTS = external global i64
@__sdl_INIT_SENSOR = external global i64
@__sdl_INIT_CAMERA = external global i64
@__sdl_WINDOW_FULLSCREEN = external global i64
@__sdl_WINDOW_OPENGL = external global i64
@__sdl_WINDOW_OCCLUDED = external global i64
@__sdl_WINDOW_HIDDEN = external global i64
@__sdl_WINDOW_BORDERLESS = external global i64
@__sdl_WINDOW_RESIZABLE = external global i64
@__sdl_WINDOW_MINIMIZED = external global i64
@__sdl_WINDOW_MAXIMIZED = external global i64
@__sdl_WINDOW_MOUSE_GRABBED = external global i64
@__sdl_WINDOW_INPUT_FOCUS = external global i64
@__sdl_WINDOW_MOUSE_FOCUS = external global i64
@__sdl_WINDOW_EXTERNAL = external global i64
@__sdl_WINDOW_MODAL = external global i64
@__sdl_WINDOW_HIGH_PIXEL_DENSITY = external global i64
@__sdl_WINDOW_MOUSE_CAPTURE = external global i64
@__sdl_WINDOW_MOUSE_RELATIVE_MODE = external global i64
@__sdl_WINDOW_ALWAYS_ON_TOP = external global i64
@__sdl_WINDOW_UTILITY = external global i64
@__sdl_WINDOW_TOOLTIP = external global i64
@__sdl_WINDOW_POPUP_MENU = external global i64
@__sdl_WINDOW_KEYBOARD_GRABBED = external global i64
@__sdl_WINDOW_VULKAN = external global i64
@__sdl_WINDOW_METAL = external global i64
@__sdl_WINDOW_TRANSPARENT = external global i64
@__sdl_WINDOW_NOT_FOCUSABLE = external global i64
@__gl_dll_module = external global ptr
@__init_INVALID_TYPE = external global i64
@__init_type_table = external global %slice.362
@__os_STD_INPUT_HANDLE = external global i32
@__os_STD_OUTPUT_HANDLE = external global i32
@__os_STD_ERROR_HANDLE = external global i32
@__os_INVALID_HANDLE_VALUE = external global ptr
@__os_CP_UTF7 = external global i32
@__os_CP_UTF8 = external global i32
@__os_MEM_COMMIT = external global i32
@__os_MEM_RESERVE = external global i32
@__os_MEM_RELEASE = external global i32
@__os_PAGE_NOACCESS = external global i32
@__os_PAGE_READONLY = external global i32
@__os_PAGE_READWRITE = external global i32
@__os_PAGE_WRITECOPY = external global i32
@__os_PAGE_EXECUTE = external global i32
@__os_PAGE_EXECUTE_READ = external global i32
@__os_PAGE_EXECUTE_READWRITE = external global i32
@__os_PAGE_EXECUTE_WRITECOPY = external global i32
@__os_PAGE_GUARD = external global i32
@__os_PAGE_NOCACHE = external global i32
@__os_PAGE_WRITECOMBINE = external global i32
@__str_CONTINUE_BIT = global { i8, [31 x i8] } zeroinitializer, comdat, align 32
@llvm.used = appending global [1 x ptr] [ptr @asan.module_ctor], section "llvm.metadata"
@___asan_gen_ = private constant [4 x i8] c"str\00", align 1
@___asan_gen_.2 = private unnamed_addr constant [19 x i8] c"__str_CONTINUE_BIT\00", align 1
@__odr_asan_gen___str_CONTINUE_BIT = global i8 0, align 1
@__asan_global___str_CONTINUE_BIT = private global { i64, i64, i64, i64, i64, i64, i64, i64 } { i64 ptrtoint (ptr @__str_CONTINUE_BIT to i64), i64 1, i64 32, i64 ptrtoint (ptr @___asan_gen_.2 to i64), i64 ptrtoint (ptr @___asan_gen_ to i64), i64 0, i64 0, i64 ptrtoint (ptr @__odr_asan_gen___str_CONTINUE_BIT to i64) }, section ".ASAN$GL", comdat($__str_CONTINUE_BIT), align 64, !associated !0
@llvm.compiler.used = appending global [2 x ptr] [ptr @__str_CONTINUE_BIT, ptr @__asan_global___str_CONTINUE_BIT], section "llvm.metadata"
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_ctor, ptr null }]

define void @__str___GlobalInitializerFunction.0() {
block_0:
  store i8 -128, ptr @__str_CONTINUE_BIT, align 1
  ret void
}

declare i32 @__main_main()

declare i1 @SDL_Init(i32)

declare ptr @SDL_CreateWindow(ptr, i32, i32, i64)

declare void @SDL_GL_CreateContext(ptr, ptr)

declare i1 @SDL_GL_SwapWindow(ptr)

declare i1 @SDL_PollEvent(ptr)

declare ptr @SDL_GetError()

declare ptr @wglGetProcAddress(ptr)

declare ptr @GetProcAddress(ptr, ptr)

declare ptr @LoadLibraryA(ptr)

declare ptr @__gl_load_gl_fn(ptr)

declare i1 @__gl_load()

declare void @__init_global_initializers()

declare i64 @__init_get_struct_alignment(i64)

declare i64 @__init_get_type_alignment(i64)

declare i64 @__init_get_basic_type_size(ptr)

declare i64 @__init_get_struct_size(i64)

declare i64 @__init_get_type_size(i64)

declare i64 @__init_get_struct_member_offset(ptr, i64)

declare i32 @__main_main.1()

declare i32 @main()

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare void @__os_abort()

declare void @__os_assert(i1, ptr)

declare void @__os_print(ptr, i32)

declare ptr @__os_alloc(i64)

declare void @__os_free(ptr)

declare void @__io_push_string(ptr, ptr)

declare void @__io_format_uint(ptr, i64)

declare void @__io_format_int(ptr, i64)

declare void @__io_print_typetype(ptr, ptr)

declare void @__io_print_type(ptr, ptr)

declare void @__io_builder_to_string(ptr, ptr)

declare void @__io___internal_print(ptr, ptr, ptr)

declare void @__io_print(ptr, ptr)

declare void @__io_println(ptr, ptr)

declare i32 @__io_get_next(ptr)

declare void @"__io_format_float@type_*[]u32_f32_i32_@void"(i64, ptr, float, i32)

declare void @"__io_format_float@type_*[]u32_f64_i32_@void"(i64, ptr, double, i32)

declare ptr @__mem_generic_alloc(i64, ptr)

declare void @__mem_generic_free(ptr, ptr)

declare void @__mem_create_generic_allocator(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

define i64 @__str_get_codepoint_size(ptr %0) !dbg !69 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false)
  store ptr %0, ptr %1, align 8, !dbg !76
  call void @llvm.dbg.value(metadata ptr %1, metadata !77, metadata !DIExpression()), !dbg !76
  %5 = load ptr, ptr %1, align 8, !dbg !78
  store ptr %5, ptr %2, align 8, !dbg !78
  call void @llvm.dbg.declare(metadata ptr %2, metadata !79, metadata !DIExpression()), !dbg !78
  %6 = load ptr, ptr %2, align 8, !dbg !80
  %7 = load i8, ptr %6, align 1, !dbg !80
  %8 = load i8, ptr @__str_CONTINUE_BIT, align 1, !dbg !80
  %9 = and i8 %7, %8, !dbg !80
  %10 = icmp eq i8 %9, 0, !dbg !80
  br i1 %10, label %block_1, label %block_2, !dbg !80

block_1:                                          ; preds = %block_0
  ret i64 1, !dbg !81

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !81

block_3:                                          ; preds = %block_2
  store i64 1, ptr %3, align 8, !dbg !82
  call void @llvm.dbg.declare(metadata ptr %3, metadata !83, metadata !DIExpression()), !dbg !82
  store i64 1, ptr %4, align 8, !dbg !84
  call void @llvm.dbg.declare(metadata ptr %4, metadata !85, metadata !DIExpression()), !dbg !84
  br label %block_4, !dbg !84

block_4:                                          ; preds = %block_6, %block_3
  %11 = load ptr, ptr %2, align 8, !dbg !84
  %12 = load i8, ptr %11, align 1, !dbg !84
  %13 = zext i8 %12 to i32, !dbg !84
  %14 = load i8, ptr @__str_CONTINUE_BIT, align 1, !dbg !84
  %15 = zext i8 %14 to i32, !dbg !84
  %16 = load i64, ptr %4, align 8, !dbg !84
  %17 = trunc i64 %16 to i32, !dbg !84
  %18 = lshr i32 %15, %17, !dbg !84
  %19 = and i32 %13, %18, !dbg !84
  %20 = icmp ne i32 %19, 0, !dbg !84
  br i1 %20, label %block_5, label %block_7, !dbg !84

block_5:                                          ; preds = %block_4
  %21 = load i64, ptr %3, align 8, !dbg !86
  %22 = add i64 %21, 1, !dbg !86
  store i64 %22, ptr %3, align 8, !dbg !86
  br label %block_6, !dbg !86

block_6:                                          ; preds = %block_5
  %23 = load i64, ptr %4, align 8, !dbg !86
  %24 = add i64 %23, 1, !dbg !86
  store i64 %24, ptr %4, align 8, !dbg !86
  %25 = load i64, ptr %4, align 8, !dbg !86
  br label %block_4, !dbg !86

block_7:                                          ; preds = %block_4
  %26 = load i64, ptr %3, align 8, !dbg !87
  ret i64 %26, !dbg !87
}

define ptr @__str_advance(ptr %0) !dbg !88 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false)
  store ptr %0, ptr %1, align 8, !dbg !91
  call void @llvm.dbg.value(metadata ptr %1, metadata !92, metadata !DIExpression()), !dbg !91
  %4 = load ptr, ptr %1, align 8, !dbg !93
  %5 = call i64 @__str_get_codepoint_size(ptr %4), !dbg !93
  store i64 %5, ptr %2, align 8, !dbg !93
  call void @llvm.dbg.declare(metadata ptr %2, metadata !94, metadata !DIExpression()), !dbg !93
  %6 = load ptr, ptr %1, align 8, !dbg !95
  store ptr %6, ptr %3, align 8, !dbg !95
  call void @llvm.dbg.declare(metadata ptr %3, metadata !96, metadata !DIExpression()), !dbg !95
  %7 = load ptr, ptr %3, align 8, !dbg !97
  %8 = load i64, ptr %2, align 8, !dbg !97
  %9 = getelementptr i8, ptr %7, i64 %8, !dbg !97
  ret ptr %9, !dbg !97
}

define ptr @__str__it_advance(ptr %0, i64 %1, i64 %2) !dbg !98 {
block_0:
  %3 = alloca ptr, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false)
  store ptr %0, ptr %3, align 8, !dbg !102
  call void @llvm.dbg.value(metadata ptr %3, metadata !103, metadata !DIExpression()), !dbg !102
  store i64 %1, ptr %4, align 8, !dbg !102
  call void @llvm.dbg.value(metadata ptr %4, metadata !104, metadata !DIExpression()), !dbg !102
  store i64 %2, ptr %5, align 8, !dbg !102
  call void @llvm.dbg.value(metadata ptr %5, metadata !105, metadata !DIExpression()), !dbg !102
  %6 = load i64, ptr %5, align 8, !dbg !106
  %7 = add i64 %6, 1, !dbg !106
  %8 = load i64, ptr %4, align 8, !dbg !106
  %9 = icmp eq i64 %7, %8, !dbg !106
  %10 = load i64, ptr %5, align 8, !dbg !106
  %11 = load i64, ptr %4, align 8, !dbg !106
  %12 = icmp sge i64 %10, %11, !dbg !106
  %13 = icmp ne i1 %9, false, !dbg !106
  %14 = icmp ne i1 %12, false, !dbg !106
  %15 = or i1 %13, %14, !dbg !106
  br i1 %15, label %block_1, label %block_2, !dbg !106

block_1:                                          ; preds = %block_0
  ret ptr null, !dbg !107

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !107

block_3:                                          ; preds = %block_2
  %16 = load ptr, ptr %3, align 8, !dbg !108
  %17 = call ptr @__str_advance(ptr %16), !dbg !108
  ret ptr %17, !dbg !108
}

define i32 @__str_deref(ptr %0) !dbg !109 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 4 %4, i8 0, i32 4, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false)
  store ptr %0, ptr %1, align 8, !dbg !113
  call void @llvm.dbg.value(metadata ptr %1, metadata !114, metadata !DIExpression()), !dbg !113
  %6 = load ptr, ptr %1, align 8, !dbg !115
  store ptr %6, ptr %2, align 8, !dbg !115
  call void @llvm.dbg.declare(metadata ptr %2, metadata !116, metadata !DIExpression()), !dbg !115
  %7 = load ptr, ptr %2, align 8, !dbg !117
  %8 = call i64 @__str_get_codepoint_size(ptr %7), !dbg !117
  store i64 %8, ptr %3, align 8, !dbg !117
  call void @llvm.dbg.declare(metadata ptr %3, metadata !118, metadata !DIExpression()), !dbg !117
  call void @llvm.dbg.declare(metadata ptr %4, metadata !119, metadata !DIExpression()), !dbg !120
  %9 = load i64, ptr %3, align 8, !dbg !121
  store i64 0, ptr %5, align 8, !dbg !121
  br label %block_1, !dbg !121

block_1:                                          ; preds = %block_3, %block_0
  %10 = load i64, ptr %5, align 8, !dbg !121
  %11 = icmp ult i64 %10, %9, !dbg !121
  br i1 %11, label %block_2, label %block_4, !dbg !121

block_2:                                          ; preds = %block_1
  call void @llvm.dbg.declare(metadata ptr %5, metadata !122, metadata !DIExpression()), !dbg !121
  %12 = load i32, ptr %4, align 4, !dbg !123
  %13 = shl i32 %12, 8, !dbg !123
  store i32 %13, ptr %4, align 4, !dbg !123
  %14 = load i32, ptr %4, align 4, !dbg !124
  %15 = load ptr, ptr %2, align 8, !dbg !124
  %16 = load i64, ptr %5, align 8, !dbg !124
  %17 = getelementptr i8, ptr %15, i64 %16, !dbg !124
  %18 = load i8, ptr %17, align 1, !dbg !124
  %19 = zext i8 %18 to i32, !dbg !124
  %20 = or i32 %14, %19, !dbg !124
  store i32 %20, ptr %4, align 4, !dbg !124
  br label %block_3, !dbg !124

block_3:                                          ; preds = %block_2
  %21 = load i64, ptr %5, align 8, !dbg !124
  %22 = add i64 %21, 1, !dbg !124
  store i64 %22, ptr %5, align 8, !dbg !124
  br label %block_1, !dbg !124

block_4:                                          ; preds = %block_1
  %23 = load i32, ptr %4, align 4, !dbg !125
  ret i32 %23, !dbg !125
}

define i32 @__str_index(ptr %0, i64 %1) !dbg !126 {
block_0:
  %2 = alloca %string.314, align 8
  %3 = alloca i64, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 16, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false)
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %0, i64 16, i1 false), !dbg !134
  call void @llvm.dbg.value(metadata ptr %2, metadata !135, metadata !DIExpression()), !dbg !134
  store i64 %1, ptr %3, align 8, !dbg !134
  call void @llvm.dbg.value(metadata ptr %3, metadata !136, metadata !DIExpression()), !dbg !134
  %6 = load i64, ptr %3, align 8, !dbg !137
  %7 = getelementptr inbounds %string.314, ptr %2, i32 0, i32 1, !dbg !137
  %8 = load i64, ptr %7, align 8, !dbg !137
  %9 = icmp sge i64 %6, %8, !dbg !137
  br i1 %9, label %block_1, label %block_2, !dbg !137

block_1:                                          ; preds = %block_0
  ret i32 0, !dbg !138

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !138

block_3:                                          ; preds = %block_2
  %10 = getelementptr inbounds %string.314, ptr %2, i32 0, i32 0, !dbg !139
  %11 = load i64, ptr %10, align 8, !dbg !139
  store i64 %11, ptr %4, align 8, !dbg !139
  call void @llvm.dbg.declare(metadata ptr %4, metadata !140, metadata !DIExpression()), !dbg !139
  %12 = load i64, ptr %3, align 8, !dbg !141
  store i64 0, ptr %5, align 8, !dbg !141
  br label %block_4, !dbg !141

block_4:                                          ; preds = %block_6, %block_3
  %13 = load i64, ptr %5, align 8, !dbg !141
  %14 = icmp ult i64 %13, %12, !dbg !141
  br i1 %14, label %block_5, label %block_7, !dbg !141

block_5:                                          ; preds = %block_4
  call void @llvm.dbg.declare(metadata ptr %5, metadata !142, metadata !DIExpression()), !dbg !141
  %15 = load ptr, ptr %4, align 8, !dbg !143
  %16 = call ptr @__str_advance(ptr %15), !dbg !143
  store ptr %16, ptr %4, align 8, !dbg !143
  br label %block_6, !dbg !143

block_6:                                          ; preds = %block_5
  %17 = load i64, ptr %5, align 8, !dbg !143
  %18 = add i64 %17, 1, !dbg !143
  store i64 %18, ptr %5, align 8, !dbg !143
  br label %block_4, !dbg !143

block_7:                                          ; preds = %block_4
  %19 = load ptr, ptr %4, align 8, !dbg !144
  %20 = call i32 @__str_deref(ptr %19), !dbg !144
  ret i32 %20, !dbg !144
}

declare void @"__array_add@*[]u32_u32_@void"(ptr, i32)

declare void @"__array_create@type_*__mem_Allocator_@[]u8"(ptr, i64, ptr)

declare void @"__array_add@*[]u8_u8_@void"(ptr, i8)

declare void @"__array_create@type_*__mem_Allocator_@[]u32"(ptr, i64, ptr)

declare void @"__array_free@*[]u32_@void"(ptr)

declare void @"__array_free@*[]u8_@void"(ptr)

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

declare void @__asan_before_dynamic_init(i64)

declare void @__asan_after_dynamic_init()

declare void @__asan_register_globals(i64, i64)

declare void @__asan_unregister_globals(i64, i64)

declare void @__asan_register_image_globals(i64)

declare void @__asan_unregister_image_globals(i64)

declare void @__asan_register_elf_globals(i64, i64, i64)

declare void @__asan_unregister_elf_globals(i64, i64, i64)

declare void @__asan_init()

; Function Attrs: nounwind
define internal void @asan.module_ctor() #3 {
  call void @__asan_init()
  call void @__asan_version_mismatch_check_v8()
  ret void
}

declare void @__asan_version_mismatch_check_v8()

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!67, !68}

!0 = !{ptr @__str_CONTINUE_BIT}
!1 = distinct !DICompileUnit(language: DW_LANG_C99, file: !2, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, splitDebugInlining: false)
!2 = !DIFile(filename: "strings.rcp", directory: "E:\\C_Projects\\ReComp\\std")
!3 = !{!4, !16, !37, !46, !51, !55, !63, !4, !16, !37, !46, !51, !55}
!4 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_TypeKind", scope: !2, file: !2, size: 64, align: 64, elements: !5)
!5 = !{!6, !7, !8, !9, !10, !11, !12, !13, !14, !15}
!6 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!7 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!8 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!9 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!10 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!11 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!12 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!13 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!14 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!15 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!16 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_BasicKind", scope: !2, file: !2, size: 64, align: 64, elements: !17)
!17 = !{!18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36}
!18 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!19 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!20 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!21 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!22 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!23 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!24 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!25 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!26 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!27 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!28 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!29 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!31 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!32 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!33 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!34 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!35 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!36 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!37 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_BasicFlag", scope: !2, file: !2, size: 32, align: 32, elements: !38)
!38 = !{!39, !40, !41, !42, !43, !44, !45}
!39 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!40 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!41 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!42 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!43 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!44 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!45 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!46 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_StructFlag", scope: !2, file: !2, size: 32, align: 32, elements: !47)
!47 = !{!48, !49, !50}
!48 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!49 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!50 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!51 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_VectorKind", scope: !2, file: !2, size: 64, align: 64, elements: !52)
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!54 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!55 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__compile_CompileFlag", scope: !2, file: !2, size: 32, align: 32, elements: !56)
!56 = !{!57, !58, !59, !60, !61, !62}
!57 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!58 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!59 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!60 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!61 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!62 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!63 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__sdl_EventType", scope: !2, file: !2, size: 32, align: 32, elements: !64)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "FIRST", value: 0)
!66 = !DIEnumerator(name: "QUIT", value: 256, isUnsigned: true)
!67 = !{i32 2, !"CodeView", i32 1}
!68 = !{i32 2, !"Debug Info Version", i32 3}
!69 = distinct !DISubprogram(name: "get_codepoint_size", linkageName: "__str_get_codepoint_size", scope: !2, file: !2, line: 6, type: !70, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !75)
!70 = !DISubroutineType(types: !71)
!71 = !{!72, !73}
!72 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!73 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !74, size: 64, align: 64, dwarfAddressSpace: 0)
!74 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!75 = !{}
!76 = !DILocation(line: 6, scope: !69)
!77 = !DILocalVariable(name: "codepoint", scope: !69, file: !2, line: 6, type: !73)
!78 = !DILocation(line: 7, scope: !69)
!79 = !DILocalVariable(name: "p", scope: !69, file: !2, line: 7, type: !73)
!80 = !DILocation(line: 8, scope: !69)
!81 = !DILocation(line: 9, scope: !69)
!82 = !DILocation(line: 12, scope: !69)
!83 = !DILocalVariable(name: "size", scope: !69, file: !2, line: 12, type: !72)
!84 = !DILocation(line: 13, scope: !69)
!85 = !DILocalVariable(name: "i", scope: !69, file: !2, line: 13, type: !72)
!86 = !DILocation(line: 14, scope: !69)
!87 = !DILocation(line: 16, scope: !69)
!88 = distinct !DISubprogram(name: "advance", linkageName: "__str_advance", scope: !2, file: !2, line: 19, type: !89, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !75)
!89 = !DISubroutineType(types: !90)
!90 = !{!73, !73}
!91 = !DILocation(line: 19, scope: !88)
!92 = !DILocalVariable(name: "pos", scope: !88, file: !2, line: 19, type: !73)
!93 = !DILocation(line: 20, scope: !88)
!94 = !DILocalVariable(name: "size", scope: !88, file: !2, line: 20, type: !72)
!95 = !DILocation(line: 21, scope: !88)
!96 = !DILocalVariable(name: "p", scope: !88, file: !2, line: 21, type: !73)
!97 = !DILocation(line: 22, scope: !88)
!98 = distinct !DISubprogram(name: "_it_advance", linkageName: "__str__it_advance", scope: !2, file: !2, line: 25, type: !99, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !75)
!99 = !DISubroutineType(types: !100)
!100 = !{!101, !73, !72, !72}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "?*u8", baseType: !74, size: 64, align: 64, dwarfAddressSpace: 0)
!102 = !DILocation(line: 25, scope: !98)
!103 = !DILocalVariable(name: "pos", scope: !98, file: !2, line: 25, type: !73)
!104 = !DILocalVariable(name: "count", arg: 1, scope: !98, file: !2, line: 25, type: !72)
!105 = !DILocalVariable(name: "at", arg: 2, scope: !98, file: !2, line: 25, type: !72)
!106 = !DILocation(line: 26, scope: !98)
!107 = !DILocation(line: 27, scope: !98)
!108 = !DILocation(line: 29, scope: !98)
!109 = distinct !DISubprogram(name: "deref", linkageName: "__str_deref", scope: !2, file: !2, line: 32, type: !110, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !75)
!110 = !DISubroutineType(types: !111)
!111 = !{!112, !73}
!112 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!113 = !DILocation(line: 32, scope: !109)
!114 = !DILocalVariable(name: "pos", scope: !109, file: !2, line: 32, type: !73)
!115 = !DILocation(line: 33, scope: !109)
!116 = !DILocalVariable(name: "p", scope: !109, file: !2, line: 33, type: !73)
!117 = !DILocation(line: 34, scope: !109)
!118 = !DILocalVariable(name: "size", scope: !109, file: !2, line: 34, type: !72)
!119 = !DILocalVariable(name: "res", scope: !109, file: !2, line: 35, type: !112)
!120 = !DILocation(line: 35, scope: !109)
!121 = !DILocation(line: 36, scope: !109)
!122 = !DILocalVariable(name: "i", scope: !109, file: !2, line: 36, type: !72)
!123 = !DILocation(line: 37, scope: !109)
!124 = !DILocation(line: 38, scope: !109)
!125 = !DILocation(line: 41, scope: !109)
!126 = distinct !DISubprogram(name: "index", linkageName: "__str_index", scope: !2, file: !2, line: 44, type: !127, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !75)
!127 = !DISubroutineType(types: !128)
!128 = !{!112, !129, !72}
!129 = !DICompositeType(tag: DW_TAG_structure_type, name: "string", scope: !130, file: !130, size: 128, elements: !131)
!130 = !DIFile(filename: "main.rcp", directory: "E:\\Non_C_Projects\\RCPProjects\\graph\\src")
!131 = !{!132, !133}
!132 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !130, file: !130, baseType: !73, size: 64, align: 64)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !130, file: !130, baseType: !72, size: 64, align: 64, offset: 64)
!134 = !DILocation(line: 44, scope: !126)
!135 = !DILocalVariable(name: "s", scope: !126, file: !2, line: 44, type: !129)
!136 = !DILocalVariable(name: "idx", arg: 1, scope: !126, file: !2, line: 44, type: !72)
!137 = !DILocation(line: 45, scope: !126)
!138 = !DILocation(line: 46, scope: !126)
!139 = !DILocation(line: 49, scope: !126)
!140 = !DILocalVariable(name: "p", scope: !126, file: !2, line: 49, type: !73)
!141 = !DILocation(line: 50, scope: !126)
!142 = !DILocalVariable(name: "i", scope: !126, file: !2, line: 50, type: !72)
!143 = !DILocation(line: 51, scope: !126)
!144 = !DILocation(line: 53, scope: !126)
